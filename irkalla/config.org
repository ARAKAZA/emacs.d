#+title: Just a Literate Emacs Configuration
#+author: Icy-Thought
#+language: en

* Table of Contents :TOC:
- [[#early-initialization][Early Initialization]]
  - [[#performance-configurations][Performance Configurations]]
    - [[#initialize-use-package-at-a-later-stage][Initialize ~use-package~ at a Later Stage]]
    - [[#quicker-launches-in-fundamental-mode][Quicker Launches in Fundamental-mode]]
    - [[#dont-compact-font-cache-on-gc][Don't Compact Font-cache on GC]]
    - [[#increase-processing-power][Increase Processing Power]]
    - [[#native-compilation][Native Compilation]]
  - [[#reducing-noise-on-start][Reducing Noise on Start]]
    - [[#start-up-messages][Start-up Messages]]
    - [[#prevent-for-information-messages][Prevent "For information..." Messages]]
    - [[#loading-x-files-echos][Loading =X= Files Echo's]]
  - [[#remaining-modifications][Remaining Modifications]]
    - [[#encoding-system---utf-8][Encoding System -> UTF-8]]
    - [[#load-recently-compiled-el-files][Load Recently Compiled =.el= Files]]
    - [[#prevent-frame-resize-on-launch][Prevent Frame Resize on Launch]]
    - [[#remove-bloated-ui-elements][Remove Bloated UI-elements]]
    - [[#set-frame-transparency-early][Set Frame Transparency Early]]
- [[#finally-initialize-emacs][Finally, Initialize Emacs!]]
  - [[#emacs--the-internal-plugins][Emacs & The Internal Plugins]]
    - [[#user-directories][User Directories]]
    - [[#elpaca-package-manager][Elpaca: Package Manager]]
    - [[#general-management][General Management]]
    - [[#decorating-our-emacs][Decorating our Emacs]]
    - [[#specifying-several-useful-options][Specifying Several Useful Options]]
  - [[#external-plugins][External Plugins]]
    - [[#ricing-the-environment][Ricing The Environment]]
    - [[#polishing-the-ui-of-our-editing-environment][Polishing the UI of our Editing Environment]]
    - [[#various-tools-for-our-different-use-cases][Various Tools for our Different Use-cases]]
  - [[#sprinkle-the-last-remaining-bit][Sprinkle the last remaining bit]]

* Early Initialization

:PROPERTIES:
:header-args: :tangle early-init.el
:END:

Complying with the [[https://gnu.org/software/emacs/manual/html_node/elisp/Library-Headers.html][Emacs convention]] with the intention of making it a tad easier for people to determine who the hell
wrote this madness.. (😅)

#+begin_src emacs-lisp
;;; early-init.el --- Icy-Thoughts's Irkalla Emacs Early Initiliazation -*- lexical-binding: t -*-

;; Copyright (C) 2022-2023 Icy-Thought

;; Author: Icy-Thought <icy-thought@pm.me>
;; Keywords: internal
;; URL: https://icy-thought.github.io/

;;; Commentary:
;; Settings introduced in this file will be loaded early during the initliazation process of our Irkalla Emacs.

;;; Code:
#+end_src

** Performance Configurations

*** Initialize ~use-package~ at a Later Stage

#+begin_src emacs-lisp
(setq package-quickstart nil
      package-enable-at-startup nil)
#+end_src

*** Quicker Launches in Fundamental-mode

#+begin_src emacs-lisp
(setq initial-major-mode 'fundamental-mode
      initial-scratch-message nil)
#+end_src

*** Don't Compact Font-cache on GC

#+begin_src emacs-lisp
(setq inhibit-compacting-font-caches t)
#+end_src

*** Increase Processing Power

#+begin_src emacs-lisp
(when (boundp 'read-process-output-max)
  (setq read-process-output-max (* 24 1024 1024)))
#+end_src


*** Native Compilation 

#+begin_src emacs-lisp
(customize-set-variable 'native-comp-async-report-warnings-errors nil)
(customize-set-variable 'native-comp-speed 2)
(customize-set-variable 'native-comp-deferred-compilation t)
#+end_src

** Reducing Noise on Start

*** Start-up Messages

#+begin_src emacs-lisp
(setq inhibit-startup-buffer-menu t
      inhibit-startup-message t
      inhibit-startup-screen t
      inhibit-startup-echo-area-message t
      initial-scratch-message nil)
#+end_src

*** Prevent "For information..." Messages

#+begin_src emacs-lisp
(advice-add #'display-startup-echo-area-message :override #'ignore)
(advice-add #'display-startup-screen :override #'ignore)
#+end_src

*** Loading =X= Files Echo's

#+begin_src emacs-lisp
(unless init-file-debug
  (define-advice load-file (:override (file) silence)
    (load file nil 'nomessage))
  ;; Undo advice until later for proper loading..
  (define-advice startup--load-user-init-file (:before (&rest _) undo-silence)
    (advice-remove #'load-file #'load-file@silence))
  <<disable-emacs-modeline>>
  )
#+end_src

Disable default Emacs mode-line for a minor launch time boost. (30-50 ms)

#+NAME: disable-emacs-modeline
#+begin_src emacs-lisp
(put 'mode-line-format 'initial-value (default-toplevel-value 'mode-line-format))

(setq-default mode-line-format nil)

(dolist (buf (buffer-list))
  (with-current-buffer buf (setq mode-line-format nil)))
#+end_src

** Remaining Modifications 

*** Encoding System -> UTF-8

#+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
#+end_src

*** Load Recently Compiled =.el= Files

#+begin_src emacs-lisp
(customize-set-variable 'load-prefer-newer t)
#+end_src

*** Prevent Frame Resize on Launch

#+begin_src emacs-lisp
(setq frame-inhibit-implied-resize t
      frame-resize-pixelwise t)
#+end_src

*** Remove Bloated UI-elements

#+begin_src emacs-lisp
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)
#+end_src

*** Set Frame Transparency Early

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(alpha-background . 85))
(set-frame-parameter (selected-frame) 'alpha-background 85)
#+end_src

* Finally, Initialize Emacs!

:PROPERTIES:
:header-args: :tangle init.el
:END:

Complying with the [[https://gnu.org/software/emacs/manual/html_node/elisp/Library-Headers.html][Emacs convention]] with the intention of making it a tad easier for people to determine who the hell
wrote this madness.. (😅)

#+begin_src emacs-lisp
;;; init.el --- Icy-Thoughts's Irkalla Emacs configuration -*- lexical-binding: t -*-

;; Copyright (C) 2022-2023 Icy-Thought

;; Author: Icy-Thought <icy-thought@pm.me>
;; Keywords: internal
;; URL: https://icy-thought.github.io/

;;; Commentary:
;; A fully fledged, reproducible Emacs configuration

;;; Code:
#+end_src

** Emacs & The Internal Plugins

Boilerplate code that is necessary to prevent garbage and misunderstanding from occurring along the road.

To retain our sanity, let's enable =debug-on-error=

#+begin_src emacs-lisp
(setq debug-on-error init-file-debug)
#+end_src

*** User Directories

**** Cache/Config/Data Directories

#+begin_src emacs-lisp
(require 'xdg)

(setq-default
 user-emacs-config-directory (expand-file-name "emacs" (xdg-config-home))
 user-emacs-data-directory   (expand-file-name "emacs" (xdg-data-home))
 user-emacs-cache-directory  (expand-file-name "emacs" (xdg-cache-home)))
#+end_src

**** Migrating Backup & Cache Directory

#+begin_src emacs-lisp
(let ((backup-dir (expand-file-name "backup" user-emacs-cache-directory))
      (auto-save-dir (expand-file-name "auto-save" user-emacs-cache-directory)))
  (unless (file-directory-p backup-dir)
    (mkdir backup-dir t)
    (mkdir auto-save-dir t))

  (setq backup-directory-alist `(("." . ,backup-dir))
        auto-save-file-name-transforms `((".*" ,auto-save-dir t))
        create-lockfiles nil
        backup-by-copying t))
#+end_src

***** Limiting Age & Backup Age

#+begin_src emacs-lisp
(use-package emacs
  :elpaca nil
  :custom
  (backup-by-copying t)
  (delete-by-moving-to-trash t)
  (delete-old-versions t)
  (kept-new-versions 10)
  (kept-old-versions 3))
#+end_src

**** Migrating Custom-file -> =/tmp/emacs-custom-*.el=

#+begin_src emacs-lisp
(setq custom-file
      (if (boundp 'server-socket-dir)
          (expand-file-name "custom.el" server-socket-dir)
        (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))

(when (file-exists-p custom-file)
  (load custom-file))
#+end_src

**** Custom-theme Directory

#+begin_src emacs-lisp
(defconst irkalla-directory "~/git/icy-thought/emacs.d/irkalla")

(add-to-list 'load-path irkalla-directory)

(add-to-list 'custom-theme-load-path (expand-file-name "themes" irkalla-directory))
#+end_src

*** Elpaca: Package Manager

**** Bootstrapping According to Official Docs

#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.4)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil
                              :files (:defaults (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))

(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (call-process "git" nil buffer t "clone"
                                       (plist-get order :repo) repo)))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (kill-buffer buffer)
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))

(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
#+end_src

**** Basic Configurations

#+begin_src emacs-lisp
(unless (fboundp 'use-package)
  (elpaca use-package (require 'use-package)))

(elpaca elpaca-use-package
  (elpaca-use-package-mode)
  (setq elpaca-use-package-by-default t))
#+end_src

**** Ensure Elpaca ~==~ configured

#+begin_src emacs-lisp
(elpaca-wait)
#+end_src

*** General Management

**** Prevent Littering

#+begin_src emacs-lisp
(use-package no-littering
  :init
  (setq no-littering-etc-directory (expand-file-name "no-littering-etc/" user-emacs-cache-directory)
        no-littering-var-directory (expand-file-name "no-littering-var/" user-emacs-cache-directory)))
#+end_src

***** Prevent ~recentf~ From Littering

#+begin_src emacs-lisp
(use-package recentf
  :elpaca nil
  :after no-littering
  :config
  (add-to-list 'recentf-exclude no-littering-etc-directory)
  (add-to-list 'recentf-exclude no-littering-var-directory))
#+end_src

**** Appropriate Garbage Collection

#+begin_src emacs-lisp
(use-package gcmh
  :demand t
  :custom (gcmh-mode 1))
#+end_src

**** Secrets Management Through Agenix

#+begin_src emacs-lisp
;;;###autoload
(defun irkalla/read-secret-file (filename)
  "fetch content of secrets file generated by agenix."
  (with-temp-buffer
    (insert-file-contents (concat "/run/agenix/" filename))
    (string-trim-right (buffer-string))))
#+end_src

**** Prevent Killing Certain Buffers

#+begin_src emacs-lisp
(with-current-buffer "*scratch*"
  (emacs-lock-mode 'kill))

(with-current-buffer "*Messages*"
  (emacs-lock-mode 'kill))
#+end_src

*** Decorating our Emacs

Increase the width of our Emacs environment to encapsulate our wide & butchered comments.

#+begin_src emacs-lisp
(setq-default fill-column 120)
#+end_src

Several minor changes which increases the eye-candy of our editor by a small margin!

1. Break long lines into smaller bits and display a marker (↴) at the end of each line.
2. Break windows into equal portions.
3. Stretch cursor to fit what it hovers above.

#+begin_src emacs-lisp
(use-package emacs
  :elpaca nil
  :custom
  (truncate-lines t)
  (truncate-string-ellipsis "↴")
  (window-combination-resize t)
  (x-stretch-cursor t))
#+end_src

**** Transparent Emacs Frame (Toggle)

#+begin_src emacs-lisp
;;;###autoload
(defun irkalla/toggle-frame-transparency ()
  "Toggle (on/off) Emacs frame transparency on demand!"
  (interactive)
  (let ((alpha-value
         (if (equal (frame-parameter nil 'alpha-background) 100)
             85 100)))
    (set-frame-parameter nil 'alpha-background alpha-value)
    (add-to-list 'default-frame-alist `(alpha-background . ,alpha-value))))
#+end_src

**** Specifying Desired Font-set

#+begin_src emacs-lisp
(defconst irkalla/default-font "JetBrainsMono Nerd Font")

;; Making our beloved font more aesthetically pleasing!
(set-face-attribute 'default nil
                    :family irkalla/default-font
                    :height 125
                    :weight 'semi-bold)

(set-face-attribute 'variable-pitch nil
                    :family irkalla/default-font
                    :height 105
                    :weight 'semi-bold)

(set-face-attribute 'fixed-pitch nil
                    :family irkalla/default-font
                    :height 105
                    :width 'expanded
                    :weight 'semi-bold)

(set-fontset-font "fontset-default"
                  'arabic (font-spec :family "Scheherazade New;" :size 25))
#+end_src

**** Styling Several Font-faces

#+begin_src emacs-lisp
(custom-set-faces
 '(font-lock-builtin-face       ((t (:slant italic))))
 '(font-lock-comment-face       ((t (:slant italic))))
 '(font-lock-doc-face           ((t (:slant italic))))
 '(font-lock-function-name-face ((t (:weight bold :slant italic))))
 '(font-lock-keyword-face       ((t (:slant italic))))
 '(font-lock-preprocessor-face  ((t (:weight bold))))
 '(font-lock-string-face        ((t (:slant italic)))))
#+end_src

***** Org-Mode

****** Quotes Shall Become /Italic/

#+begin_src emacs-lisp
(setq-default org-fontify-quote-and-verse-blocks t)
#+end_src

****** Headings Ought to Grow in Size

#+begin_src emacs-lisp
(custom-set-faces
 '(org-document-title ((t (:height 1.5))))
 '(org-level-1        ((t (:inherit outline-1 :height 1.25))))
 '(org-level-2        ((t (:inherit outline-2 :height 1.15))))
 '(org-level-3        ((t (:inherit outline-3 :height 1.12))))
 '(org-level-4        ((t (:inherit outline-4 :height 1.09))))
 '(org-level-5        ((t (:inherit outline-5 :height 1.06)))))
#+end_src

***** Markdown

****** Headings Shall Follow the Steps of Org-Mode

#+begin_src emacs-lisp
(custom-set-faces
 '(markdown-header-face-1 ((t (:inherit markdown-header-face :height 1.25 :weight extra-bold))))
 '(markdown-header-face-2 ((t (:inherit markdown-header-face :height 1.15 :weight bold))))
 '(markdown-header-face-3 ((t (:inherit markdown-header-face :height 1.08 :weight bold))))
 '(markdown-header-face-4 ((t (:inherit markdown-header-face :height 1.00 :weight bold))))
 '(markdown-header-face-5 ((t (:inherit markdown-header-face :height 0.90 :weight bold))))
 '(markdown-header-face-6 ((t (:inherit markdown-header-face :height 0.75 :weight extra-bold)))))
#+end_src

**** Prettifying our Symbols

Reducing text in functions when possible is a nice feature to have.

Example, prettify =lambda -> 𝛌= 
#+begin_src emacs-lisp
(use-package prettify-symbols
  :elpaca nil
  :hook (prog-mode . prettify-symbols-mode)
  :custom (prettify-symbols-unprettify-at-point 'right-edge))
#+end_src

Also, ligatures for cleaner symbols
#+begin_src emacs-lisp
(use-package ligature
  :hook ((org-mode markdown-mode prog-mode) . ligature-mode)
  :config
  (ligature-set-ligatures 'prog-mode
                          '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                            ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                            "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                            "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                            "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                            "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                            "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                            "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                            ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                            "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                            "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                            "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                            "\\\\" "://")))
#+end_src

**** Display Pop-up Windows, instead of mini-buffer

#+begin_src emacs-lisp
(use-package posframe
  :defer t
  :custom (posframe-mouse-banish '(0 . 5000)))
#+end_src

*** Specifying Several Useful Options

**** Identifying Ourselves

#+begin_src emacs-lisp
(setq user-full-name "Icy-Thought"
      user-mail-address "icy-thought@pm.me")
#+end_src

**** Editor-related Customization's

#+begin_src emacs-lisp
(use-package emacs
  :elpaca nil
  :init (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  :custom
  (echo-keystrokes 0.02)
  (enable-local-variables t)
  (enable-recursive-minibuffers t)
  (help-window-select t)
  (inhibit-startup-echo-area-message t)
  (kill-whole-line t)
  (recenter-positions '(top middle bottom))
  (require-final-newline t)
  (sentence-end-double-space nil)
  (use-dialog-box nil)
  (use-short-answers t))
#+end_src

Prevent Emacs from spamming notifications when ~Err~ has been encountered.

#+begin_src emacs-lisp
(setq-default ring-bell-function 'ignore)
#+end_src

Navigating & Editing files can be tedious, therefore we need some defaults to retain our sanity..

#+begin_src emacs-lisp
(setq-default
  auto-save-interval 50
  confirm-nonexistent-file-or-buffer nil
  find-file-suppress-same-file-warnings t
  remote-file-name-inhibit-locks t)
#+end_src

Tell our completion system to ignore case's since being arrogant does not make our lives better..

#+begin_src emacs-lisp
(setq-default
  read-file-name-completion-ignore-case t
  read-buffer-completion-ignore-case t)
#+end_src

Changed file? Do not fret any longer, update the damn file!

#+begin_src emacs-lisp
(setq-default load-prefer-newer t)
#+end_src

**** Highlight Cursor-line
#+begin_src emacs-lisp
(use-package hl-line
  :elpaca nil
  :hook (elpaca-after-init . hl-line-mode))
#+end_src

**** Auto-revert: Update Inactive Files on-change
#+begin_src emacs-lisp
(use-package auto-revert
  :elpaca nil
  :hook ((markdown-mode org-mode text-mode prog-mode) . auto-revert-mode)
  :custom
  (auto-revert-notify t)
  (auto-revert-verbose t))
#+end_src

**** Word-based movement
#+begin_src emacs-lisp
(use-package subword
  :elpaca nil
  :hook (elpaca-after-init . subword-mode))
#+end_src

We also want to move to last known position in the buffer we just entered.
#+begin_src emacs-lisp
(use-package save-place
  :elpaca nil
  :hook (elpaca-after-init . save-place-mode))
#+end_src

**** Time: Configuring our Clock

#+begin_src emacs-lisp
(use-package time
  :elpaca nil
  :custom
  (display-time-24hr-format t)
  (display-time-day-and-date t))
#+end_src

**** Whitespace: Customizing Cook + Clean-up

#+begin_src emacs-lisp
(use-package whitespace
  :elpaca nil
  ;; :hook (prog-mode . whitespace-mode)
  :custom
  (whitespace-action '(cleanup auto-cleanup))
  (whitespace-style
   '(face spaces tabs newline trailing space-mark tab-mark newline-mark))
  (whitespace-display-mappings
   '(;; space -> · else .
     (space-mark 32 [183] [46])
     ;; new line -> ¬ else $
     (newline-mark ?\n [172 ?\n] [36 ?\n])
     ;; carriage return (Windows) -> ¶ else #
     (newline-mark ?\r [182] [35])
     ;; tabs -> » else >
     (tab-mark ?\t [187 ?\t] [62 ?\t]))))
#+end_src

**** Number-line: Relative Numbering

#+begin_src emacs-lisp
(use-package display-line-numbers
  :elpaca nil
  :hook ((text-mode prog-mode conf-mode) . display-line-numbers-mode)
  :custom (display-line-numbers-type 'relative))
#+end_src

**** Electric Pair: Insert Matching SYMB Pairs

#+begin_src emacs-lisp
(use-package elec-pair
  :elpaca nil
  :hook ((org-mode
          markdown-mode
          prog-mode) . electric-pair-mode)
  :config (add-hook 'emacs-lisp-mode-hook (lambda () (electric-pair-mode 0))))
#+end_src

** External Plugins

*** Ricing The Environment

#+begin_src emacs-lisp
(defadvice load-theme (before clear-previous-themes activate)
  "Pave way for our upcoming theme!"
  (mapc #'disable-theme custom-enabled-themes))
#+end_src

A wonderful package which helps us reduce the amount of boilerplate code required to setup a customized theme.

#+begin_src emacs-lisp
(use-package autothemer
  :config (load-theme 'rose-pine t))
#+end_src

A simple notification's library for us to use during our stay!

#+begin_src emacs-lisp
(use-package alert
  :custom (alert-default-style 'libnotify))
#+end_src

**** Colorful Delimiters

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode)
  :config
  (setq show-paren-style 'parenthesis
        show-paren-when-point-in-periphery nil
        show-paren-when-point-inside-paren nil)
  (show-paren-mode))
#+end_src

**** Solaire: Cast a Shade On our Theme

#+begin_src emacs-lisp :tangle no
(use-package solaire-mode
  :after doom-themes
  :config (add-to-list 'solaire-mode-themes-to-face-swap "^doom-")
  :custom (solaire-global-mode +1))
#+end_src

*** Polishing the UI of our Editing Environment

**** Centaur Tabs: Tab-bar to Reduce the Burden of Navigation

#+begin_src emacs-lisp
(use-package centaur-tabs
  :hook (elpaca-after-init . centaur-tabs-mode)
  :general (centaur-tabs-mode-map
            "C-<prior>" #'centaur-tabs-backward
            "C-<next>"  #'centaur-tabs-forward)
  :init (setq centaur-tabs-enable-key-bindings t)
  :custom
  (centaur-tabs-height 32)
  (centaur-tabs-set-icons t)
  (centaur-tabs-show-new-tab-button t)
  (centaur-tabs-set-modified-marker t)
  (centaur-tabs-show-navigation-buttons t)
  (centaur-tabs-set-bar 'right)
  (centaur-tabs-show-count nil)
  (centaur-tabs-left-edge-margin nil)
  (centaur-tabs-headline-match)
  :config
  (dolist (centaur-face '(centaur-tabs-selected
                          centaur-tabs-selected-modified
                          centaur-tabs-unselected
                          centaur-tabs-unselected-modified))
    (set-face-attribute centaur-face nil :family irkalla/default-font :height 110))
  (setq x-underline-at-descent-line t))
#+end_src

**** Emacs-Dashboard: A Home-Page for our Emacs

#+begin_src emacs-lisp
(use-package dashboard
  :after nerd-icons
  :hook (dashboard-mode
         . (lambda () (setq-local frame-title-format nil))) ;; remove default title
  :init
  ;; Launch dashboard on start!
  (dashboard-setup-startup-hook)
  (setq initial-buffer-choice
        (lambda () (get-buffer-create "*dashboard*")))
  :custom
  ;; UI Customizations:
  (dashboard-display-icons-p t)
  (dashboard-icon-type 'nerd-icons)

  ;; Customizing setup:
  (dashboard-modify-heading-icons '((recents . "file-text")
                                    (bookmarks . "book")))
  (dashboard-banner-logo-title "Welcome To The Underworld, Human. - Irkalla")
  (dashboard-startup-banner (expand-file-name "dasHead.svg" user-emacs-config-directory))
  (dashboard-center-content t)
  (dashboard-set-heading-icons t)
  (dashboard-set-file-icons t)
  (dashboard-set-init-info t)
  ;; (dashboard-projects-switch-function 'irkalla/switch-project-by-name) ;; :TODO| setup a projectile consult switcher
  (dashboard-week-agenda t)

  ;; Quick-Navigation buttons for our dashboard
  (dashboard-set-navigator t)
  (dashboard-navigator-buttons
   `(
     ((,(nerd-icons-octicon "nf-oct-mark_github" :height 1.2 :v-adjust 0.0)
       " Homepage"
       "Browse my personal GitHub profile home."
       (lambda (&rest _) (browse-url "https://github.com/Icy-Thought")))

      (,(nerd-icons-mdicon "nf-md-download" :height 1.2 :v-adjust 0.0)
       "Elpaca Manager"
       "Manage Irkalla Emacs packages."
       (lambda (&rest _) (elpaca-manager)))

      (,(nerd-icons-mdicon "nf-md-refresh" :height 1.2 :v-adjust 0.0)
       "Restart Emacs.."
       "Restart Irkalla Emacs instance."
       (lambda (&rest _) (restart-emacs))))))

  ;; Controlling the state of our displayed items
  (dashboard-items '((recents   . 5)
                     (bookmarks . 5)
                     (projects  . 5)
                     (agenda    . 5)
                     (registers . 5)))

  (dashboard-item-names '(("Recent Files:" . "Recently opened files:")
                          ("Agenda for today:" . "Today's agenda:")
                          ("Agenda for the coming week:" . "Agenda:"))))
#+end_src

**** Telephone-Line: A Well-built Status-bar

#+begin_src emacs-lisp
(use-package telephone-line
  :hook (elpaca-after-init . telephone-line-mode)
  :custom
  (telephone-line-height 26)
  (telephone-line-evil-use-short-tag t)

  ;; Left separator
  (telephone-line-primary-left-separator 'telephone-line-tan-left)
  (telephone-line-secondary-left-separator 'telephone-line-tan-hollow-left)

  ;; Right separator
  (telephone-line-primary-right-separator 'telephone-line-tan-right)
  (telephone-line-secondary-right-separator 'telephone-line-tan-hollow-right))
#+end_src

**** Doom-Modeline: An Alternative Status-bar

#+begin_src emacs-lisp :tangle no
(use-package doom-modeline
  :hook (elpaca-after-init . doom-modeline-mode)
  :custom
  (doom-modeline-bar-width 4)
  (doom-modeline-buffer-file-name 'relative-to-project)
  (doom-modeline-github t)
  (doom-modeline-github-interval (* 30 60))
  (doom-modeline-height 35)
  (if (display-graphic-p) (doom-modeline-hud t)))
#+end_src

**** Nerd-icons: Icons to Decorate our Environment

#+begin_src emacs-lisp
(use-package nerd-icons
  :custom
  (nerd-icons-font-family irkalla/default-font)
  (nerd-icons-scale-factors 1.25))
#+end_src

Extending the support of our Nerd-icons to function in other areas.

#+begin_src emacs-lisp
(use-package nerd-icons-dired
  :after (nerd-icons dired)
  :hook (dired-mode . nerd-icons-dired-mode))

(use-package nerd-icons-ibuffer
  :after (nerd-icons ibuffer)
  :hook (ibuffer-mode . nerd-icons-ibuffer-mode))

(use-package nerd-icons-completion
  :after (nerd-icons marginalia)
  :hook (marginalia-mode . nerd-icons-completion-marginalia-setup)
  :init (nerd-icons-completion-mode))

(use-package treemacs-nerd-icons
  :after (nerd-icons treemacs)
  :config (treemacs-load-theme "nerd-icons"))
#+end_src

**** SVG-Tags: A Ricer's Dream, SVG-based Tagging System! 

***** Installing SVG-tags + SVG-lib

#+begin_src emacs-lisp
(use-package svg-lib
  :config
  (plist-put svg-lib-style-default :font-family irkalla/default-font)
  (plist-put svg-lib-style-default :font-size 13))

(use-package svg-tag-mode
  :after svg-lib
  :hook ((markdown-mode org-mode prog-mode) . svg-tag-mode)
  :config
  <<svg-constants>>
  <<svg-progress-bar>>
  <<svg-tags>>
  )
#+end_src

***** Defining Various SVG-tags

****** Defining our Constants.

#+NAME: svg-constants
#+begin_src emacs-lisp
(defconst date-re "[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\}")
(defconst time-re "[0-9]\\{2\\}:[0-9]\\{2\\}")
(defconst day-re "[A-Za-z]\\{3\\}")
(defconst day-time-re (format "\\(%s\\)? ?\\(%s\\)?" day-re time-re))
#+end_src

****** Writing our SVG Progress-bar

#+NAME: svg-progress-bar
#+begin_src emacs-lisp
(defun svg-progress-percent (value)
    (svg-image (svg-lib-concat
                (svg-lib-progress-bar (/ (string-to-number value) 100.0)
                                      nil :margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
                (svg-lib-tag (concat value "%")
                             nil :stroke 0 :margin 0)) :ascent 'center))

(defun svg-progress-count (value)
    (let* ((seq (mapcar #'string-to-number (split-string value "/")))
           (count (float (car seq)))
           (total (float (cadr seq))))
      (svg-image (svg-lib-concat
                  (svg-lib-progress-bar (/ count total) nil
                                        :margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
                  (svg-lib-tag value nil
                               :stroke 0 :margin 0)) :ascent 'center)))
#+end_src

****** Ricing our SVG-Tags

#+begin_src emacs-lisp
(setq svg-tag-tags
      `(
        ;; Org tags :THIS:
        ;; ("\\(:[A-Za-z0-9]+:\\)"
        ;;  . ((lambda (tag)
        ;;       (svg-tag-make tag :beg 1 :end -1 :inverse t))))

        ;; Task priority [#a]
        ("\\[#[a-zA-Z]\\]"
         . ( (lambda (tag)
               (svg-tag-make tag :face 'org-priority
                             :beg 2 :end -1 :margin 0 :inverse t))))

        ;; Progress [1/3] or [45%]
        ("\\(\\[[0-9]\\{1,3\\}%\\]\\)"
         . ((lambda (tag)
              (svg-progress-percent (substring tag 1 -2)))))

        ("\\(\\[[0-9]+/[0-9]+\\]\\)"
         . ((lambda (tag)
              (svg-progress-count (substring tag 1 -1)))))

        ;; Specific tags -> allow spaces
        ;; :TODO| Reduce to a more general solution
        ;; :NOTE| Reduce to a more general solution
        ;; :FIXME| There is more regexp
        ;; :HACK| Fix this regexp
        ;; :WARN| This needs to be fixed

        ("\\([:]\\{1\\}\\W?\\(?:TODO\\|Todo\\)|.*\\)"
         . ((lambda (tag)
              (svg-tag-make tag :face 'org-code :inverse t :crop-left t :beg 6))))

        ("\\([:]\\{1\\}\\W?\\(?:TODO\\|Todo\\)*|\\)"
         . ((lambda (tag)
              (svg-tag-make tag :face 'org-code :inverse nil :margin 0 :crop-right t :beg 1 :end -1))))

        ("\\([:]\\{1\\}\\W?\\(?:WARN\\|Warn\\)|.*\\)"
         . ((lambda (tag)
              (svg-tag-make tag :face 'org-priority :inverse t :crop-left t :beg 7))))

        ("\\([:]\\{1\\}\\W?\\(?:FIXME\\|Fixme\\)|.*\\)"
         . ((lambda (tag)
              (svg-tag-make tag :face 'org-priority :inverse t :crop-left t :beg 7))))

        ("\\([:]\\{1\\}\\W?\\(?:HACK\\|PERF\\|MARK\\|Hack\\)|.*\\)"
         . ((lambda (tag)
              (svg-tag-make tag :face 'org-priority :inverse t :crop-left t :beg 6))))

        ("\\([:]\\{1\\}\\W?\\(?:HACK\\|Hack\\|PERF\\|WARN\\|Warn\\|FIXME\\|Fixme\\|MARK\\)*|\\)"
         . ((lambda (tag)
              (svg-tag-make tag :face 'org-priority :inverse nil :margin 0 :crop-right t :beg 1 :end -1))))

        ("\\([:]\\{1\\}\\W?\\(?:NOTE\\|Note\\)|.*\\)"
         . ((lambda (tag)
              (svg-tag-make tag :face 'org-cite :inverse t :crop-right t :beg 6))))

        ("\\([:]\\{1\\}\\W?\\(?:NOTE\\|Note\\)*|\\)"
         . ((lambda (tag)
              (svg-tag-make tag :face 'org-cite :inverse nil :margin 0 :crop-right t :beg 1 :end -1))))

        ;; Org TAGS
        (":TODO:" . ((lambda (tag) (svg-tag-make "TODO" :inverse t :face 'org-headline-todo))))
        (":WIP:" . ((lambda (tag) (svg-tag-make "WIP" :inverse t :face 'org-cite))))
        (":DONE:" . ((lambda (tag) (svg-tag-make "DONE" :inverse t :face 'org-done))))
        (":NOTE:" . ((lambda (tag) (svg-tag-make "NOTE"))))
        ("SCHEDULED:" . ((lambda (tag) (svg-tag-make "SCHEDULED" :inverse t :face 'org-warning))))
        ("DEADLINE:" . ((lambda (tag) (svg-tag-make "DEADLINE" :inverse t :face 'org-priority))))
        ;; ("+BEGIN_SRC" . ((lambda (tag) (svg-tag-make "BEGIN" :inverse t :face 'org-code))))
        ;; ("+END_SRC" . ((lambda (tag) (svg-tag-make "END" :face 'org-code))))
        ;; ("+RESULTS:" . ((lambda (tag) (svg-tag-make "RESULTS" :face 'org-cite-key :underline nil))))
        (":X" . ((lambda (tag) (svg-tag-make "[X]" :inverse t :face 'org-checkbox-statistics-done))))
        (":-" . ((lambda (tag) (svg-tag-make "[-]" :inverse t :face 'org-checkbox))))

        ;; Citation of the form [cite:@Knuth:1984]
        ("\\(\\[cite:@[A-Za-z]+:\\)"
         . ((lambda (tag) (svg-tag-make tag :inverse t :beg 7 :end -1 :crop-right t))))

        ("\\[cite:@[A-Za-z]+:\\([0-9]+\\]\\)"
         . ((lambda (tag)
              (svg-tag-make tag :end -1 :crop-left t))))

          ;;; Works for stuff like :XXX|YYY:
        ("\\(:[A-Z]+\\)\|[a-zA-Z#0-9]+:"
         . ((lambda (tag)
              (svg-tag-make tag :beg 1 :inverse t :margin 0 :crop-right t))))

        (":[A-Z]+\\(\|[a-zA-Z#0-9]+:\\)"
         . ((lambda (tag)
              (svg-tag-make tag :beg 1 :end -1 :margin 0 :crop-left t))))

        ;; Active date (with or without day name, with or without time) <2023-04-03 Sun 17:45>
        (,(format "\\(<%s>\\)" date-re)
         . ((lambda (tag)
              (svg-tag-make tag :beg 1 :end -1 :margin 0))))

        (,(format "\\(<%s \\)%s>" date-re day-time-re)
         . ((lambda (tag)
              (svg-tag-make tag :beg 1 :inverse t :crop-right t :margin 0 :face 'org-agenda-date))))

        (,(format "<%s \\(%s>\\)" date-re day-time-re)
         . ((lambda (tag)
              (svg-tag-make tag :end -1 :inverse nil :crop-left t :margin 0 :face 'org-agenda-date))))))
#+end_src

**** Doom-Themes: Pre-defined Themes

#+begin_src emacs-lisp :tangle no
(use-package doom-themes
  :custom (doom-themes-treemacs-theme "doom-colors"))

(with-eval-after-load 'doom-themes
  (doom-themes-treemacs-config))
(load-theme (intern "doom-tokyo-night") t))
#+end_src

**** Ef-Themes: Pre-defined Themes

#+begin_src emacs-lisp :tangle no
(use-package ef-themes
  :init (load-theme (intern "ef-winter") t)
  :custom
  (ef-themes-select 'ef-winter)
  (ef-themes-to-toggle '(ef-summer ef-winter))
  (ef-themes-mixed-fonts t)
  (ef-themes-variable-pitch-ui t)
  (ef-themes-region '(intense no-extend neutral)))
#+end_src

*** Various Tools for our Different Use-cases

**** Default Application Launchers

#+begin_src emacs-lisp
(use-package openwith
  :init (openwith-mode t)
  :config
  (setq openwith-associations
        (list (list (openwith-make-extension-regexp
                     '("mpg" "mpeg" "mp3" "mp4" "avi" "wmv" "wav"
                       "mov" "flv" "ogm" "ogg" "mkv"))
                    "mpv" '(file)))))
#+end_src

**** Consult: 



**** Embark: 
**** Magit: 
**** Ement: A Superior Matrix Client
**** PDF-Tools: 
**** Treemacs: 
**** VTerm: 
**** Vertico: 

** Sprinkle the last remaining bit

#+begin_src emacs-lisp
;;; init.el ends here
#+end_src
