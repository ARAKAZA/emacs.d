#+title: Just a Literate Emacs Configuration
#+author: Icy-Thought
#+language: en
#+STARTUP: showeverything

#+NAME: irkalla-emacs.png
#+CAPTION: Showcasing my very first standalone Emacs configuration.
[[../.github/assets/png/irkalla.png]]

* Table of Contents :TOC:
- [[#early-initialization-of-irkalla-emacs][Early Initialization of Irkalla Emacs]]
  - [[#performance-configurations][Performance Configurations]]
    - [[#initialize-use-package-at-a-later-stage][Initialize ~use-package~ at a Later Stage]]
    - [[#quicker-launches-in-fundamental-mode][Quicker Launches in Fundamental-mode]]
    - [[#dont-compact-font-cache-on-gc][Don't Compact Font-cache on GC]]
    - [[#increase-processing-power][Increase Processing Power]]
    - [[#switching-user-directories][Switching User Directories]]
    - [[#native-compilation][Native Compilation]]
  - [[#reducing-noise-on-start][Reducing Noise on Start]]
    - [[#start-up-messages][Start-up Messages]]
    - [[#prevent-for-information-messages][Prevent "For information..." Messages]]
    - [[#loading-x-files-echos][Loading =X= Files Echo's]]
  - [[#remaining-modifications][Remaining Modifications]]
    - [[#encoding-system---utf-8][Encoding System -> UTF-8]]
    - [[#load-recently-compiled-el-files][Load Recently Compiled =.el= Files]]
    - [[#prevent-frame-resize-on-launch][Prevent Frame Resize on Launch]]
  - [[#decorating-irkalla-early][Decorating Irkalla Early]]
    - [[#controlling-our-various-fonts][Controlling our Various Fonts]]
  - [[#closing-early-init][Closing Early-Init!]]
- [[#embarking-on-the-irkalla-journey-initialization][Embarking on the Irkalla Journey: Initialization.]]
  - [[#the-beginning-of-irkalla-emacs][The Beginning of Irkalla Emacs]]
    - [[#elpaca-package-manager][Elpaca: Package Manager]]
    - [[#general-management][General Management]]
    - [[#enhancing-the-aesthetics-and-functionality][Enhancing the Aesthetics and Functionality]]
    - [[#unraveling-a-multitude-of-powerful-options][Unraveling a Multitude of Powerful Options]]
  - [[#expanding-irkallas-abilities][Expanding Irkalla's Abilities]]
    - [[#supercharging-with-essentials][Supercharging with Essentials]]
    - [[#applying-vibrant-colors-to-irkalla][Applying Vibrant Colors To Irkalla]]
    - [[#unleashing-the-power-of-ui-extensions][Unleashing the Power of UI Extensions]]
    - [[#building-a-versatile-toolbox][Building a Versatile Toolbox]]
    - [[#supercharging-irkallas-mobility][Supercharging Irkalla's Mobility]]
    - [[#tailoring-our-editing-experience][Tailoring our Editing Experience]]
    - [[#polish--perfect-formatting-and-spell-check][Polish & Perfect: Formatting and Spell-Check]]
    - [[#a-more-efficient-completion-system][A More Efficient Completion System]]
    - [[#harnessing-the-powers-of-lsp][Harnessing the Powers of LSP]]
    - [[#prog--text-code-craftsmanship][(Prog & Text) Code Craftsmanship]]
  - [[#concluding-our-journey-with-irkalla-emacs][Concluding Our Journey with Irkalla Emacs]]

* Early Initialization of Irkalla Emacs
:PROPERTIES:
:header-args+: :tangle "~/.config/emacs/early-init.el" :noweb yes
:END:

Complying with the [[https://gnu.org/software/emacs/manual/html_node/elisp/Library-Headers.html][Emacs convention]] with the intention of making it a tad easier for people to determine who the hell
wrote this madness.. (😅)

#+begin_src emacs-lisp
;;; early-init.el --- Icy-Thoughts's Irkalla Emacs Early Initiliazation -*- lexical-binding: t -*-

;; Copyright (C) 2023-2023 Icy-Thought

;; Author: Icy-Thought <icy-thought@pm.me>
;; Keywords: internal
;; URL: https://icy-thought.github.io/

;;; Commentary:
;; Configurations which ought to be loaded during Irkalla Emacs initliazation process.

;;; Code:
#+end_src

** Performance Configurations

*** Initialize ~use-package~ at a Later Stage

#+begin_src emacs-lisp
(setq package-quickstart nil
      package-enable-at-startup nil)
#+end_src

*** Quicker Launches in Fundamental-mode

#+begin_src emacs-lisp
(setq initial-major-mode 'fundamental-mode)
#+end_src

*** Don't Compact Font-cache on GC

#+begin_src emacs-lisp
(setq inhibit-compacting-font-caches t)
#+end_src

*** Increase Processing Power

#+begin_src emacs-lisp
(when (boundp 'read-process-output-max)
  (setq read-process-output-max (* 24 1024 1024)))
#+end_src

*** Switching User Directories

#+begin_src emacs-lisp
(setq user-emacs-directory (expand-file-name "~/.config/emacs"))

;; :NOTE| Adding the path for our custom themes
(add-to-list 'custom-theme-load-path (expand-file-name "themes" user-emacs-directory))
#+end_src

**** Migrating Custom-file -> =/tmp/emacs-custom-*.el=

#+begin_src emacs-lisp
(setq custom-file
      (if (boundp 'server-socket-dir)
          (expand-file-name "custom.el" server-socket-dir)
        (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))

(when (file-exists-p custom-file)
  (load custom-file))
#+end_src

*** Native Compilation

#+begin_src emacs-lisp
(when (featurep 'native-compile)
  ;; :NOTE| Retain native compilation cache files in ~/.cache/emacs directory
  (let ((path (expand-file-name "var/eln-cache/" user-emacs-directory)))
    (setq native-comp-eln-load-path (list path)
          native-compile-target-directory path))

  ;; :NOTE| Reduce native-compilation noise
  (setq native-comp-async-report-warnings-errors nil
        inhibit-automatic-native-compilation t))
#+end_src

** Reducing Noise on Start

*** Start-up Messages

#+begin_src emacs-lisp
(setq inhibit-startup-buffer-menu t
      inhibit-startup-message t
      inhibit-startup-screen t
      inhibit-startup-echo-area-message t)
#+end_src

*** Prevent "For information..." Messages

#+begin_src emacs-lisp
(advice-add #'display-startup-echo-area-message :override #'ignore)
(advice-add #'display-startup-screen :override #'ignore)
#+end_src

*** Loading =X= Files Echo's

#+begin_src emacs-lisp
(unless init-file-debug
  (define-advice load-file (:override (file) silence)
    (load file nil 'nomessage))
  ;; Undo advice until later for proper loading..
  (define-advice startup--load-user-init-file (:before (&rest _) undo-silence)
    (advice-remove #'load-file #'load-file@silence))
  <<disable-emacs-modeline>>)
#+end_src

Disable default Emacs mode-line for a minor launch time boost. (30-50 ms)

#+NAME: disable-emacs-modeline
#+begin_src emacs-lisp :tangle no
(put 'mode-line-format 'initial-value (default-toplevel-value 'mode-line-format))

(setq-default mode-line-format nil)

(dolist (buf (buffer-list))
  (with-current-buffer buf (setq mode-line-format nil)))
#+end_src

** Remaining Modifications

*** Encoding System -> UTF-8

#+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
#+end_src

*** Load Recently Compiled =.el= Files

#+begin_src emacs-lisp
(customize-set-variable 'load-prefer-newer t)
#+end_src

*** Prevent Frame Resize on Launch

#+begin_src emacs-lisp
(setq frame-inhibit-implied-resize t
      frame-resize-pixelwise t)
#+end_src

** Decorating Irkalla Early

#+begin_src emacs-lisp
(setq default-frame-alist
      (append (list
               '(alpha-background . 85)

               ;; :NOTE| Default Irkalla font
               '(font . "VictorMono Nerd Font-13.5:weight=bold:antialias=true")
               '(height . 125)

               ;; :NOTE| Disabling unnecessary bloat..
               '(fullscreen . nil)
               '(menu-bar-lines . 0)
               '(tool-bar-lines . 0)
               '(vertical-scroll-bars . nil))))
#+end_src

*** Controlling our Various Fonts

Aesthetically pleasing Arabic fonts are rather hard to come-by...

#+begin_src emacs-lisp
(set-fontset-font "fontset-default"
                  'arabic (font-spec :family "Scheherazade New;" :size 25))
#+end_src

**** Switching Frame Slants

#+begin_src emacs-lisp
(custom-set-faces
 '(font-lock-builtin-face       ((t (:slant italic))))
 '(font-lock-comment-face       ((t (:slant italic))))
 '(font-lock-doc-face           ((t (:slant italic))))
 '(font-lock-function-name-face ((t (:slant italic :weight bold))))
 '(font-lock-keyword-face       ((t (:slant italic))))
 '(font-lock-preprocessor-face  ((t (:weight bold))))
 '(font-lock-string-face        ((t (:slant italic)))))
#+end_src

** Closing Early-Init!

#+begin_src emacs-lisp
;;; early-init.el ends here
#+end_src

* Embarking on the Irkalla Journey: Initialization.
:PROPERTIES:
:header-args+: :tangle "~/.config/emacs/init.el" :noweb yes
:END:

Complying with the [[https://gnu.org/software/emacs/manual/html_node/elisp/Library-Headers.html][Emacs convention]] with the intention of making it a tad easier for people to determine who the hell
wrote this madness.. (😅)

#+begin_src emacs-lisp
;;; init.el --- Icy-Thoughts's Irkalla Emacs configuration -*- lexical-binding: t -*-

;; Copyright (C) 2023-2023 Icy-Thought

;; Author: Icy-Thought <icy-thought@pm.me>
;; Keywords: internal
;; URL: https://icy-thought.github.io/

;;; Commentary:
;; A fully fledged, reproducible Emacs configuration

;;; Code:
#+end_src

** The Beginning of Irkalla Emacs

Boilerplate code that is necessary to prevent garbage and misunderstanding from occurring along the road.

To retain our sanity, let's enable =debug-on-error=

#+begin_src emacs-lisp
(setq debug-on-error init-file-debug)
#+end_src

Profile our startup time to determine our heavy loaded packages!

#+begin_src emacs-lisp :tangle no
(profiler-start 'cpu+mem)

(add-hook 'elpaca-after-init-hook (lambda () (profiler-stop) (profiler-report)))
#+end_src

Have ~use-package~ report the slow packages for us to take action on.

#+begin_src emacs-lisp
(setq use-package-compute-statistics t)
#+end_src

*** Elpaca: Package Manager

**** Bootstrapping According to Official Docs

#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.5)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil
                              :files (:defaults (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (call-process "git" nil buffer t "clone"
                                       (plist-get order :repo) repo)))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
#+end_src

**** Basic Configurations

#+begin_src emacs-lisp
(unless (fboundp 'use-package)
  (elpaca use-package (require 'use-package)))

(elpaca elpaca-use-package
  (elpaca-use-package-mode)
  (setq elpaca-use-package-by-default t))
#+end_src

**** Ensure Elpaca ~==~ configured

#+begin_src emacs-lisp
(elpaca-wait)
#+end_src

*** General Management

**** Prevent Littering

#+begin_src emacs-lisp
(use-package no-littering
  :config
  (setq-default
   no-littering-etc-directory (expand-file-name "etc/" user-emacs-directory)   ; :WARN| store configurations
   no-littering-var-directory (expand-file-name "var/" user-emacs-directory))) ; :WARN| store Emacs data
#+end_src

***** Prevent ~recentf~ From Littering

#+begin_src emacs-lisp
(use-package recentf
  :elpaca nil
  :after no-littering
  :config
  (add-to-list 'recentf-exclude no-littering-etc-directory)
  (add-to-list 'recentf-exclude no-littering-var-directory)

  ;; :NOTE| Ignore Emacs-everywhere file entries
  (add-to-list 'recentf-exclude
               (concat "/tmp/emacs-everywhere")))
#+end_src

**** Limiting File & Backup Age

Storing our ~Auto-Save~ and ~Backup~ files in our ~No-Littering~ directory is trivial!

#+begin_src emacs-lisp
(with-eval-after-load 'no-littering
  (setq-default
   auto-save-file-name-transforms
   `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))

    backup-directory-alist
    `((".*" . ,(no-littering-expand-var-file-name "backups/")))))
#+end_src

Afterwards, proceeding with the backup & auto-save related configurations should not cause us any worry.

#+begin_src emacs-lisp
(use-package emacs
  :elpaca nil
  :custom
  (backup-by-copying t)
  (delete-by-moving-to-trash t)
  (delete-old-versions t)
  (kept-new-versions 10)
  (kept-old-versions 3))
#+end_src

**** Appropriate Garbage Collection

#+begin_src emacs-lisp
(use-package gcmh
  :demand t
  :custom (gcmh-mode 1))
#+end_src

**** Secrets Management Through Agenix

#+begin_src emacs-lisp
;;;###autoload
(defun irkalla/read-secret-file (filename)
  "fetch content of secrets file generated by agenix."
  (with-temp-buffer
    (insert-file-contents (concat "/run/agenix/" filename))
    (string-trim-right (buffer-string))))
#+end_src

**** Prevent Killing Certain Buffers

#+begin_src emacs-lisp
(with-current-buffer "*scratch*"
  (emacs-lock-mode 'kill))

(with-current-buffer "*Messages*"
  (emacs-lock-mode 'kill))
#+end_src

*** Enhancing the Aesthetics and Functionality

Several minor changes which increases the eye-candy of our editor by a small margin!

1. Set default buffer width to 120 characters.
2. Break long lines into smaller bits and display a marker (↴) at the end of each line.
3. Break windows into equal portions.
4. Stretch cursor to fit what it hovers above.

#+begin_src emacs-lisp
(use-package emacs
  :elpaca nil
  :custom
  (fill-column 120)
  (truncate-lines t)
  (truncate-string-ellipsis "↴")
  (window-combination-resize t)
  (x-stretch-cursor t))
#+end_src

**** Transparent Emacs Frame (Toggle)

#+begin_src emacs-lisp
;;;###autoload
(defun irkalla/toggle-frame-transparency ()
  "Toggle (on/off) Emacs frame transparency on demand!"
  (interactive)
  (let ((alpha-value
         (if (equal (frame-parameter nil 'alpha-background) 100)
             85 100)))
    (set-frame-parameter nil 'alpha-background alpha-value)
    (add-to-list 'default-frame-alist `(alpha-background . ,alpha-value))))
#+end_src

**** Prettifying our Symbols

Reducing text in functions when possible is a nice feature to have.

Example, prettify =lambda -> 𝛌=
#+begin_src emacs-lisp
(use-package prettify-symbols
  :elpaca nil
  :hook (prog-mode . prettify-symbols-mode)
  :custom (prettify-symbols-unprettify-at-point 'right-edge))
#+end_src

Also, ligatures for cleaner symbols
#+begin_src emacs-lisp
(use-package ligature
  :hook ((org-mode markdown-mode prog-mode) . ligature-mode)
  :config
  (ligature-set-ligatures 'prog-mode
                          '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                            ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                            "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                            "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                            "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                            "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                            "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                            "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                            ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                            "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                            "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                            "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                            "\\\\" "://")))
#+end_src

**** Display Pop-up Windows, instead of mini-buffer

#+begin_src emacs-lisp
(use-package posframe
  :defer t
  :custom (posframe-mouse-banish '(0 . 5000)))
#+end_src

*** Unraveling a Multitude of Powerful Options

**** Who am I???

#+begin_src emacs-lisp
(setq user-full-name "Icy-Thought"
      user-mail-address "icy-thought@pm.me")
#+end_src

**** Rational Irkalla Emacs Behaviour  

#+begin_src emacs-lisp
(use-package emacs
  :elpaca nil
  :custom
  (echo-keystrokes 0.02)
  (enable-recursive-minibuffers t)
  (help-window-select t)
  (inhibit-startup-echo-area-message t)
  (read-file-name-completion-ignore-case t)
  (read-buffer-completion-ignore-case t)
  (ring-bell-function 'ignore)
  (use-dialog-box nil)
  (use-short-answers t))
#+end_src

**** Highlight Cursor-line

#+begin_src emacs-lisp
(use-package hl-line
  :elpaca nil
  :hook ((prog-mode text-mode) . hl-line-mode))
#+end_src

**** Auto-revert: Update Inactive Files on-change

#+begin_src emacs-lisp
(use-package auto-revert
  :elpaca nil
  :hook ((prog-mode text-mode) . auto-revert-mode)
  :custom
  (auto-revert-notify t)
  (auto-revert-verbose t))
#+end_src

**** Word-dependent Navigation

#+begin_src emacs-lisp
(use-package subword
  :elpaca nil
  :hook ((prog-mode text-mode) . subword-mode))
#+end_src

We also want to move to last known position in the buffer we just entered.
#+begin_src emacs-lisp
(use-package save-place
  :elpaca nil
  :hook ((prog-mode text-mode) . save-place-mode))
#+end_src

**** Time: Configuring our Clock

#+begin_src emacs-lisp
(use-package time
  :elpaca nil
  :custom
  (display-time-24hr-format t)
  (display-time-day-and-date t))
#+end_src

**** Whitespace: Customizing Look + Clean-up

#+begin_src emacs-lisp
(use-package whitespace
  :elpaca nil
  :defer t
  ;; :hook (prog-mode . whitespace-mode)
  :custom
  (whitespace-action '(cleanup auto-cleanup))
  (whitespace-style
   '(face spaces tabs newline trailing space-mark tab-mark newline-mark))
  (whitespace-display-mappings
   '(;; space -> · else .
     (space-mark 32 [183] [46])
     ;; new line -> ¬ else $
     (newline-mark ?\n [172 ?\n] [36 ?\n])
     ;; carriage return (Windows) -> ¶ else #
     (newline-mark ?\r [182] [35])
     ;; tabs -> » else >
     (tab-mark ?\t [187 ?\t] [62 ?\t]))))
#+end_src

**** Number-line: Relative Numbering

#+begin_src emacs-lisp
(use-package display-line-numbers
  :elpaca nil
  :hook ((prog-mode text-mode conf-mode) . display-line-numbers-mode)
  :custom (display-line-numbers-type 'relative))
#+end_src

**** Electric Pair: Insert Matching SYMB Pairs

#+begin_src emacs-lisp
(use-package elec-pair
  :elpaca nil
  :hook ((prog-mode text-mode) . electric-pair-mode)
  :config (add-hook 'emacs-lisp-mode-hook (lambda () (electric-pair-mode 0))))
#+end_src

** Expanding Irkalla's Abilities

*** Supercharging with Essentials

**** General: A More Convenient Method for Binding Keys

#+begin_src emacs-lisp
(use-package general
  :demand t
  :config
  (general-evil-setup t)
  (general-override-mode)
  (general-auto-unbind-keys)

  ;; :NOTE| defining several ease-of-use bindings
  (general-create-definer irkalla/space-lead-keydef
    :keymaps 'override
    :states '(emacs insert motion normal visual)
    :prefix "SPC"
    :global-prefix "M-SPC")

  (general-create-definer irkalla/comma-lead-keydef
    :keymaps 'override
    :states '(emacs insert motion normal visual)
    :prefix ","
    :non-normal-prefix "M-,"))
#+end_src

Have Elpaca wait & verify that ~General~ was installed properly.

#+begin_src emacs-lisp
(elpaca-wait)
#+end_src

***** (General) Uncategorized Emacs Bindings

#+begin_src emacs-lisp
(use-package emacs
  :elpaca nil
  :general
  ("<escape>" 'keyboard-escape-quit)

  (irkalla/space-lead-keydef
    ;; Buffer-related
    "b"     '(:ignore t        :which-key "Buffer Management")
    "b d"   '(kill-this-buffer :which-key "Exit active buffer")
    "b n"   '(next-buffer      :which-key "Switch -> next buffer")
    "b p"   '(previous-buffer  :which-key "Switch -> prev. buffer")
    "b s"   '(scratch-buffer   :which-key "Switch -> curr. scratch-buf")

    ;; File-related
    "f"     '(:ignore t        :which-key "Files")
    "f RET" '(find-file        :which-key "Find files in directory")

    ;; Expression evaluation
    "e"     '(:ignore t        :which-key "Evaluation")
    "e e"   '(eval-expression  :which-key "Evaluate input")
    "e b"   '(eval-buffer      :which-key "Evaluate buffer")

    ;; Project Management
    "p"          '(:ignore t              :which-key "Projects")
    "p r"        '(projectile-replace     :which-key "Search & replace str")

    ;; Manage Emacs session
    "q"     '(:ignore t        :which-key "Manage Emacs sessions")
    "q r"   '(restart-emacs    :which-key "Restart Emacs")
    "q q"   '(kill-emacs       :which-key "Quit Emacs..."))

  (irkalla/space-lead-keydef
    :states '(visual)
    "e r"   '(eval-region      :which-key "Eval highlighted")))
#+end_src

***** (Elpaca) Quick-Access To our Package Manager

#+begin_src emacs-lisp
(use-package elpaca
  :elpaca nil
  :general
  (irkalla/comma-lead-keydef
    "p"   '(:ignore t         :which-key "Package Manager")
    "p p" '(elpaca-manager    :which-key "Open Elpaca")
    "p f" '(elpaca-fetch-all  :which-key "Fetch package commits")
    "p u" '(elpaca-update-all :which-key "Update all packages")))
#+end_src

**** Helpful: Contextual & More Convenient Help Menu

#+begin_src emacs-lisp
(use-package helpful
  :general
  (irkalla/space-lead-keydef
    "h"   '(:ignore t        :which-key "Helpful Description")
    "h k" '(helpful-key      :which-key "Key")
    "h f" '(helpful-callable :which-key "Function")
    "h v" '(helpful-variable :which-key "Variable")
    "h C" '(helpful-command  :which-key "Command")
    "h F" '(helpful-function :which-key "Interactive functions"))

  (irkalla/comma-lead-keydef
    :keymaps 'emacs-lisp-mode-map
    "h p" '(helpful-at-point :which-key "Show help for SYMB")))
#+end_src

**** Which-Key: Pop-up That Displays Available Bindings

#+begin_src emacs-lisp
(use-package which-key
  :diminish which-key-mode
  :hook ((elpaca-after-init . which-key-mode)
         (which-key . which-key-setup-minibuffer))
  :custom
  (which-key-allow-evil-operators t)
  (which-key-idle-delay 0.3)
  (which-key-show-remaining-keys t)
  (which-key-separator " → ")
  (which-key-sort-order 'which-key-prefix-then-key-order))
#+end_src

**** Hydra: A System for our Keybindings (disabled)
:PROPERTIES:
:header-args+: :tangle no
:END:

#+begin_src emacs-lisp
(use-package hydra
  :hook (emacs-lisp-mode . hydra-add-imenu))
#+end_src

Better to have our Hydra's float in mid-space instead of being positioned in the mini-buffer.

#+begin_src emacs-lisp
(use-package hydra-posframe
  :after hydra
  :hook (after-init . hydra-posframe-enable)
  :custom
  (hydra-hint-display-type 'posframe)
  (hydra-posframe-show-params '((internal-border-width . 2)
                                (left-fringe . 15)
                                (right-fringe . 15)
                                (poshandler . posframe-poshandler-window-center))))
#+end_src

A leader-key + easy way to implement hydras would reduce the burden of implementing such feature.

#+begin_src emacs-lisp
(use-package major-mode-hydra
  :after hydra
  :bind ("M-RET" . major-mode-hydra))
#+end_src

Guaranteeing that Hydra was installed properly is benefitial to our setup!

#+begin_src emacs-lisp
(elpaca-wait)
#+end_src

***** Pretty-Hydra: Project.el

#+begin_src emacs-lisp
(use-package project
  :elpaca nil
  :pretty-hydra
  ((:title (pretty-hydra-title "Project Management" 'mdicon "nf-seti-project")
           :color teal :quit-key ("q" "c-g")))
  ("Finder"
   (("f" project-find-file "navigate file in project" :exit t)
    ("f" project-or-external-find-file "navigate file in project or external root" :exit t)
    ("r" projectile-recent "Navigate to recent file in project" :exit t))
   "Buffers"
   (("b" project-switch-to-buffer "Switch to buffer in project" :exit t)
    ("K" project-kill-buffers "Kill opened buffers in project" :exit t))
   "Actions"
   (("R" project-query-replace-regexp "Query-replace REGEXP for all files in project" :exit t)
    ("m" project-compile "Compile project" :exit t))
   "Modes"
   (("g" project-vc-dir "Run VC-DIR in project" :exit t)
    ("h" project-dired "Start Dired in project" :exit t)
    ("t" projectile-run-vterm "Run VTerm in project" :exit t))
   "Search"
   (("/" project-find-regexp "Find all matches for REGEXP in project" :exit t)
    ("s" project-or-external-find-regexp "Find all matches for REGEXP in project OR outside" :exit t)
    ("p" projectile-switch-project "Switch to known project" :exit t)))
  :bind ("M-RET p" . project-hydra/body))
#+end_src

***** Pretty-Hydra: Eglot

#+begin_src emacs-lisp
(use-package eglot
  :elpaca nil
  :pretty-hydra
  ((:title (pretty-hydra-title "Eglot (LSP)" 'mdicon "nf-md-code_braces_box")
           :color teal :quit-key ("q" "c-g")))
  ("Find"
   (("d"  eglot-find-declaration "Find declaration for SYM" :exit t)
    ("i"  eglot-find-implementation "Find implementation for SYM" :exit t)
    ("D"  eglot-find-typeDefinition "Find type-def for SYM" :exit t))
   "Edit"
   (("r" eglot-rename "Rename symbol -> NEWNAME" :exit t)
    ("a" eglot-code-actions "Display code actions of region" :exit t))
   "Format"
   (("=" eglot-format-buffer "Format active buffer" :exit t)
    ("]" eglot-format "Format highlighted region" :exit t))
   "Management"
   (("X" eglot-shutdown "Shutdown Eglot server" :exit t)
    ("R" eglot-reconnect "Re-connect Eglot server" :exit t)
    ("E" eglot-events-buffer "Display server events buffer" :exit t)))
  :bind ("M-RET l" . eglot-hydra/body))
#+end_src

**** Emacs Everywhere: Allow Emacs Universal Access

#+begin_src emacs-lisp
(use-package emacs-everywhere
  :custom (emacs-everywhere-copy-command (list "cb" "copy" "%f")))
#+end_src

*** Applying Vibrant Colors To Irkalla

#+begin_src emacs-lisp
;;;###autoload
(defun irkalla/apply-theme (palette)
  "A quicker way to apply our installed themes."
  (if (custom-theme-p palette)
      (enable-theme palette)
    (load-theme palette :no-confirm)))
#+end_src

**** Autothemer: A Convenient Way to Create Emacs Themes!

#+begin_src emacs-lisp
(use-package autothemer)
#+end_src

Enabling our theme has never been more pleasant!

#+begin_src emacs-lisp
(with-eval-after-load 'autothemer
  (irkalla/apply-theme 'rose-pine))
#+end_src

**** Alert: System-integrated Notifier

#+begin_src emacs-lisp
(use-package alert
  :custom (alert-default-style 'libnotify))
#+end_src

**** Doom-Themes: Pre-defined Themes (disabled)

#+begin_src emacs-lisp :tangle no
(use-package doom-themes
  :custom (doom-themes-treemacs-theme "doom-colors"))

(with-eval-after-load 'doom-themes
  (doom-themes-treemacs-config)
  (irkalla/apply-theme 'doom-tokyo-night))
#+end_src

**** Ef-Themes: Pre-defined Themes (disabled)

#+begin_src emacs-lisp :tangle no
(use-package ef-themes
  :custom
  (ef-themes-select 'ef-winter)
  (ef-themes-to-toggle '(ef-summer ef-winter))
  (ef-themes-mixed-fonts t)
  (ef-themes-variable-pitch-ui t)
  (ef-themes-region '(intense no-extend neutral)))

(with-eval-after-load 'ef-themes
  (irkalla/apply-theme 'ef-winter)
#+end_src

**** Matching Parens & Colorful Delimiters

Colorful delimiters are rather useful, especially when dealing with lisp code!

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode)
  :config)
#+end_src

Also, highlighting the matching ~paren~ is very useful when you are lost! (😅)

#+begin_src emacs-lisp
(use-package parens
  :elpaca nil
  :hook (prog-mode . show-paren-mode)
  :custom
  (show-paren-style 'parenthesis)
  (show-paren-when-point-in-periphery nil)
  (show-paren-when-point-inside-paren nil))
#+end_src

**** Solaire: Cast a Shade On our Theme (disabled)

#+begin_src emacs-lisp :tangle no
(use-package solaire-mode
  :after doom-themes
  :config (add-to-list 'solaire-mode-themes-to-face-swap "^doom-")
  :custom (solaire-global-mode +1))
#+end_src

*** Unleashing the Power of UI Extensions

**** Centaur Tabs: Tab-bar to Reduce the Burden of Navigation

#+begin_src emacs-lisp
(use-package centaur-tabs
  :hook (elpaca-after-init . centaur-tabs-mode)
  :general (general-nmap 'centaur-tabs-mode-map
             "C-<prior>" #'centaur-tabs-backward
             "C-<next>"  #'centaur-tabs-forward)
  :custom
  (centaur-tabs-enable-key-bindings t)
  (centaur-tabs-height 32)
  (centaur-tabs-set-icons t)
  (centaur-tabs-show-new-tab-button t)
  (centaur-tabs-set-modified-marker t)
  (centaur-tabs-show-navigation-buttons t)
  (centaur-tabs-set-bar 'right)
  (centaur-tabs-show-count nil)
  (centaur-tabs-left-edge-margin nil)
  (centaur-tabs-headline-match)
  :config (setq x-underline-at-descent-line t))
#+end_src

**** Emacs-Dashboard: A Home-Page for our Emacs

#+begin_src emacs-lisp
(use-package dashboard
  :after nerd-icons
  :hook (elpaca-after-init . dashboard-open)
  :custom-face
  (dashboard-heading ((t (:weight regular))))
  (dashboard-banner-logo-title ((t (:weight regular))))
  :custom
  (initial-buffer-choice (lambda ()
                           (dashboard-refresh-buffer)
                           (get-buffer dashboard-buffer-name)))
  
  (dashboard-display-icons-p t)
  (dashboard-icon-type 'nerd-icons)

  (dashboard-banner-logo-title "Welcome To The Underworld, Human. - Irkalla")
  (dashboard-center-content t)
  (dashboard-modify-heading-icons '((recents . "file-text")
                                    (bookmarks . "book")))
  (dashboard-startup-banner (expand-file-name "logos/owl-skull.svg" user-emacs-directory))
  (dashboard-path-max-length 20)
  (dashboard-set-heading-icons t)
  (dashboard-set-file-icons t)
  (dashboard-set-init-info t)
  ;; (dashboard-projects-switch-function 'irkalla/switch-project-by-name) ;; :TODO| setup a projectile consult switcher
  (dashboard-week-agenda t)

  (dashboard-set-navigator t)
  (dashboard-navigator-buttons
   `(
     ((,(nerd-icons-octicon "nf-oct-mark_github" :height 1.2 :v-adjust 0.0)
       "Homepage"
       "Browse my personal GitHub profile home."
       (lambda (&rest _) (browse-url "https://github.com/Icy-Thought")))

      (,(nerd-icons-mdicon "nf-md-download" :height 1.2 :v-adjust 0.0)
       "Elpaca Manager"
       "Manage Irkalla Emacs packages."
       (lambda (&rest _) (elpaca-manager)))

      (,(nerd-icons-mdicon "nf-md-refresh" :height 1.2 :v-adjust 0.0)
       "Restart Emacs.."
       "Restart Irkalla Emacs instance."
       (lambda (&rest _) (restart-emacs))))))

  (dashboard-items '((recents   . 5)
                     (bookmarks . 5)
                     (projects  . 5)
                     (agenda    . 5)
                     (registers . 5)))

  (dashboard-item-names '(("Recent Files:" . "Recently opened files:")
                          ("Agenda for today:" . "Today's agenda:")
                          ("Agenda for the coming week:" . "Agenda:"))))
#+end_src

**** Telephone-Line: A Well-built Status-bar

#+begin_src emacs-lisp
(use-package telephone-line
  :hook ((prog-mode text-mode) . telephone-line-mode)
  :custom
  (telephone-line-height 26)
  (telephone-line-evil-use-short-tag t)

  ;; Left separator
  (telephone-line-primary-left-separator 'telephone-line-tan-left)
  (telephone-line-secondary-left-separator 'telephone-line-tan-hollow-left)

  ;; Right separator
  (telephone-line-primary-right-separator 'telephone-line-tan-right)
  (telephone-line-secondary-right-separator 'telephone-line-tan-hollow-right))
#+end_src

**** Doom-Modeline: An Alternative Status-bar (disabled)

#+begin_src emacs-lisp :tangle no
(use-package doom-modeline
  :hook (elpaca-after-init . doom-modeline-mode)
  :custom
  (doom-modeline-bar-width 4)
  (doom-modeline-buffer-file-name 'relative-to-project)
  (doom-modeline-github t)
  (doom-modeline-github-interval (* 30 60))
  (doom-modeline-height 35)
  (if (display-graphic-p) (doom-modeline-hud t)))
#+end_src

**** Nerd-icons: Icons to Decorate our Environment

#+begin_src emacs-lisp
(use-package nerd-icons
  :custom
  (nerd-icons-font-family "VictorMono Nerd Font")
  (nerd-icons-scale-factors 1.25))
#+end_src

Allowing ~Nerd-Icons~ to display icons in ~Vertico~ is what the typical ricer deems worthy!

#+begin_src emacs-lisp
(use-package nerd-icons-completion
  :after (nerd-icons vertico)
  :hook (vertico-mode . nerd-icons-completion-mode))
#+end_src

**** SVG-Tags: A Ricer's Dream, SVG-based Tagging System!

***** Installing SVG-Tags

#+begin_src emacs-lisp
(use-package svg-tag-mode
  :hook ((prog-mode text-mode) . svg-tag-mode)
  :config
  (setq svg-lib-style-default (plist-put svg-lib-style-default :font-size 13.5))
  
  <<svg-tag-constants>>
  <<svg-tag-progress-bar>>
  <<svg-tags>>)
#+end_src

***** Defining Various SVG-Tags

****** Defining our Constants.

#+NAME: svg-tag-constants
#+begin_src emacs-lisp :tangle no
(defconst date-re "[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\}")
(defconst time-re "[0-9]\\{2\\}:[0-9]\\{2\\}")
(defconst day-re "[A-Za-z]\\{3\\}")
(defconst day-time-re (format "\\(%s\\)? ?\\(%s\\)?" day-re time-re))
#+end_src

****** Writing our SVG Progress-bar

#+NAME: svg-tag-progress-bar
#+begin_src emacs-lisp :tangle no
(defun svg-progress-percent (value)
    (svg-image (svg-lib-concat
                (svg-lib-progress-bar (/ (string-to-number value) 100.0)
                                      nil :margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
                (svg-lib-tag (concat value "%")
                             nil :stroke 0 :margin 0)) :ascent 'center))

(defun svg-progress-count (value)
    (let* ((seq (mapcar #'string-to-number (split-string value "/")))
           (count (float (car seq)))
           (total (float (cadr seq))))
      (svg-image (svg-lib-concat
                  (svg-lib-progress-bar (/ count total) nil
                                        :margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
                  (svg-lib-tag value nil
                               :stroke 0 :margin 0)) :ascent 'center)))
#+end_src

****** Ricing our SVG-Tags

#+NAME: svg-tags
#+begin_src emacs-lisp :tangle no
(setq svg-tag-tags
      `(
        ;; Org tags :THIS:
        ;; ("\\(:[A-Za-z0-9]+:\\)"
        ;;  . ((lambda (tag)
        ;;       (svg-tag-make tag :beg 1 :end -1 :inverse t))))

        ;; Task priority [#a]
        ("\\[#[a-zA-Z]\\]"
         . ((lambda (tag)
              (svg-tag-make tag :face 'org-priority
                            :beg 2 :end -1 :margin 0 :inverse t))))

        ;; Progress [1/3] or [45%]
        ("\\(\\[[0-9]\\{1,3\\}%\\]\\)"
         . ((lambda (tag)
              (svg-progress-percent (substring tag 1 -2)))))

        ("\\(\\[[0-9]+/[0-9]+\\]\\)"
         . ((lambda (tag)
              (svg-progress-count (substring tag 1 -1)))))

        ;; Specific tags -> allow spaces
        ;; :TODO| Reduce to a more general solution
        ;; :NOTE| Reduce to a more general solution
        ;; :FIXME| There is more regexp
        ;; :HACK| Fix this regexp
        ;; :WARN| This needs to be fixed

        ("\\([:]\\{1\\}\\W?\\(?:TODO\\|Todo\\)|.*\\)"
         . ((lambda (tag)
              (svg-tag-make tag :face 'org-code :inverse t :crop-left t :beg 6))))

        ("\\([:]\\{1\\}\\W?\\(?:TODO\\|Todo\\)*|\\)"
         . ((lambda (tag)
              (svg-tag-make tag :face 'org-code :inverse nil :margin 0 :crop-right t :beg 1 :end -1))))

        ("\\([:]\\{1\\}\\W?\\(?:WARN\\|Warn\\)|.*\\)"
         . ((lambda (tag)
              (svg-tag-make tag :face 'org-priority :inverse t :crop-left t :beg 7))))

        ("\\([:]\\{1\\}\\W?\\(?:FIXME\\|Fixme\\)|.*\\)"
         . ((lambda (tag)
              (svg-tag-make tag :face 'org-priority :inverse t :crop-left t :beg 7))))

        ("\\([:]\\{1\\}\\W?\\(?:HACK\\|PERF\\|MARK\\|Hack\\)|.*\\)"
         . ((lambda (tag)
              (svg-tag-make tag :face 'org-priority :inverse t :crop-left t :beg 6))))

        ("\\([:]\\{1\\}\\W?\\(?:HACK\\|Hack\\|PERF\\|WARN\\|Warn\\|FIXME\\|Fixme\\|MARK\\)*|\\)"
         . ((lambda (tag)
              (svg-tag-make tag :face 'org-priority :inverse nil :margin 0 :crop-right t :beg 1 :end -1))))

        ("\\([:]\\{1\\}\\W?\\(?:NOTE\\|Note\\)|.*\\)"
         . ((lambda (tag)
              (svg-tag-make tag :face 'org-cite :inverse t :crop-right t :beg 6))))

        ("\\([:]\\{1\\}\\W?\\(?:NOTE\\|Note\\)*|\\)"
         . ((lambda (tag)
              (svg-tag-make tag :face 'org-cite :inverse nil :margin 0 :crop-right t :beg 1 :end -1))))

        ;; Org TAGS
        (":TODO:" . ((lambda (tag) (svg-tag-make "TODO" :inverse t :face 'org-headline-todo))))
        (":WIP:" . ((lambda (tag) (svg-tag-make "WIP" :inverse t :face 'org-cite))))
        (":DONE:" . ((lambda (tag) (svg-tag-make "DONE" :inverse t :face 'org-done))))
        (":NOTE:" . ((lambda (tag) (svg-tag-make "NOTE"))))
        ("SCHEDULED:" . ((lambda (tag) (svg-tag-make "SCHEDULED" :inverse t :face 'org-warning))))
        ("DEADLINE:" . ((lambda (tag) (svg-tag-make "DEADLINE" :inverse t :face 'org-priority))))
        ;; ("+BEGIN_SRC" . ((lambda (tag) (svg-tag-make "BEGIN" :inverse t :face 'org-code))))
        ;; ("+END_SRC" . ((lambda (tag) (svg-tag-make "END" :face 'org-code))))
        ;; ("+RESULTS:" . ((lambda (tag) (svg-tag-make "RESULTS" :face 'org-cite-key :underline nil))))
        (":X" . ((lambda (tag) (svg-tag-make "[X]" :inverse t :face 'org-checkbox-statistics-done))))
        (":-" . ((lambda (tag) (svg-tag-make "[-]" :inverse t :face 'org-checkbox))))

        ;; Citation of the form [cite:@Knuth:1984]
        ("\\(\\[cite:@[A-Za-z]+:\\)"
         . ((lambda (tag) (svg-tag-make tag :inverse t :beg 7 :end -1 :crop-right t))))

        ("\\[cite:@[A-Za-z]+:\\([0-9]+\\]\\)"
         . ((lambda (tag)
              (svg-tag-make tag :end -1 :crop-left t))))

          ;;; Works for stuff like :XXX|YYY:
        ("\\(:[A-Z]+\\)\|[a-zA-Z#0-9]+:"
         . ((lambda (tag)
              (svg-tag-make tag :beg 1 :inverse t :margin 0 :crop-right t))))

        (":[A-Z]+\\(\|[a-zA-Z#0-9]+:\\)"
         . ((lambda (tag)
              (svg-tag-make tag :beg 1 :end -1 :margin 0 :crop-left t))))

        ;; Active date (with or without day name, with or without time) <2023-04-03 Sun 17:45>
        (,(format "\\(<%s>\\)" date-re)
         . ((lambda (tag)
              (svg-tag-make tag :beg 1 :end -1 :margin 0))))

        (,(format "\\(<%s \\)%s>" date-re day-time-re)
         . ((lambda (tag)
              (svg-tag-make tag :beg 1 :inverse t :crop-right t :margin 0 :face 'org-agenda-date))))

        (,(format "<%s \\(%s>\\)" date-re day-time-re)
         . ((lambda (tag)
              (svg-tag-make tag :end -1 :inverse nil :crop-left t :margin 0 :face 'org-agenda-date))))))
#+end_src

*** Building a Versatile Toolbox

**** Default Application Launchers

#+begin_src emacs-lisp
(use-package openwith
  :hook (elpaca-after-init . openwith-mode)
  :config
  (setq openwith-associations
        (list (list (openwith-make-extension-regexp
                     '("mpg" "mpeg" "mp3" "mp4" "avi" "wmv" "wav"
                       "mov" "flv" "ogm" "ogg" "mkv"))
                    "mpv" '(file)))))
#+end_src

**** Consult: Consulting completing-read

#+begin_src emacs-lisp
(use-package consult
  :hook (completion-list-mode . consult-preview-at-point-mode)
  :general
  <<consult-bindings>>
  :config
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)
  (advice-add #'register-preview :override #'consult-register-window)
  ;; Consult -> select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)
  :custom
  (consult-narrow-key "<") ;; "C-+"

  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   :preview-key '(:debounce 0.4 any)))
#+end_src

To reduce the burden of recalling all bindings, let's rewrite some of them to match our previous Neovim setup.

#+NAME: consult-bindings
#+begin_src emacs-lisp :tangle no
(irkalla/space-lead-keydef
  "/"          '(consult-ripgrep        :which-key "Quick RegExp grep")
  "b b"        '(consult-buffer         :which-key "Switch -> buffer")

  "p b"        '(consult-project-buffer :which-key "Switch -> project buffer")
  "p /"        '(consult-git-grep       :which-key "Grep .git repostiory")

  "f f"        '(consult-find           :which-key "Find file")
  "f r"        '(consult-recent-file    :which-key "Recent files")

  ;; LSP-related
  "l"          '(:ignore t              :which-key "LSP & Editing")
  "l m"        '(consult-mark           :which-key "Jump -> marker")
  "l M"        '(consult-global-mark    :which-key "Glob. jump -> marker")
  "l o"        '(consult-outline        :which-key "Jump -> buffer outlines")
  "l ["        '(consult-flymake        :which-key "Jump -> Flymake diagnostics")
  "l ]"        '(consult-compile-error  :which-key "Jump -> compile-error in buffer"))

(irkalla/comma-lead-keydef
  "c"            '(:ignore t                   :which-key "Consult")
  "c b"          '(consult-bookmark            :which-key "Open named bookmark")
  "c h"          '(consult-history             :which-key "Insert string from hist.")
  "c k"          '(consult-kmacro              :which-key "Run KBD macro")
  "c ?"          '(consult-man                 :which-key "MAN-page str search")
  "c /"          '(consult-info                :which-key "MANUALS text search")
  "c p"          '(consult-yank-pop            :which-key "Paste yanks -> cursor")
  "c t"          '(consult-theme               :which-key "Select available themes")
  "c <return>"   '(consult-mode-command        :which-key "Run command")
  "c S-<return>" '(consult-complex-command     :which-key "Evaluate CMD from hist.")
  "c w"          '(consult-buffer-other-window :which-key "Frame buffer switch"))
#+end_src

Might as-well have consult integrate itself to our projectile and display existing files in current project directory.

#+begin_src emacs-lisp
(use-package consult-projectile
  :after projectile
  :general
  (irkalla/space-lead-keydef
    "p p" '(consult-projectile-switch-project :which-key "Switch Project")))
#+end_src

**** Dirvish: A polished Dired Front-end

#+begin_src emacs-lisp
(use-package dirvish
  :hook (dired-mode . dirvish-side-follow-mode)
  :general
  <<dirvish-bindings>>
  :config (dirvish-override-dired-mode)
  :custom
  (dirvish-side-width 30)
  (dirvish-use-header-line t)
  (dirvish-fd-default-dir "~/")
  (dirvish-quick-access-entries
   '(("h" "~/"                          "Home")
     ("d" "~/Downloads/"                "Downloads")
     ("m" "~/Library/unexplored"        "Library")
     ("t" "~/.local/share/Trash/files/" "Trash")))
  (dirvish-mode-line-format
   '(:left (sort symlink) :right (omit yank index)))
  (dirvish-attributes
   '(nerd-icons file-time file-size collapse subtree-state vc-state git-msg))
  (dired-listing-switches
   "-l --almost-all --human-readable --group-directories-first --no-group"))
#+end_src

#+NAME: dirvish-bindings
#+begin_src emacs-lisp :toggle no
(irkalla/comma-lead-keydef
  "f"   '(:ignore t    :which-key "Dirvish")
  "f f" '(dirvish-side :which-key "Dirvish Side-View")
  "f /" '(dirvish-fd   :which-key "Run fd in dir"))

(irkalla/comma-lead-keydef
  :keymaps 'dirvish-mode-map
  "a"   '(dirvish-quick-access        :which-key "Frequently used dirs")
  "f"   '(dirvish-file-info-menu      :which-key "File information")
  "y"   '(dirvish-yank-menu           :which-key "Yank marked files")
  "N"   '(dirvish-narrow              :which-key "Live narrowing")
  "^"   '(dirvish-history-last        :which-key "Goto recent buffer")
  "h"   '(dirvish-history-jump        :which-key "Goto recent dirs") ; remapped `describe-mode'
  "s"   '(dirvish-quicksort           :which-key "Sort buffers")     ; remapped `dired-sort-toggle-or-edit'
  "v"   '(dirvish-vc-menu             :which-key "Version control")  ; remapped `dired-view-file'
  "TAB" '(dirvish-subtree-toggle      :which-key "Dir -> sub-tree")
  "M-f" '(dirvish-history-go-forward  :which-key "History -> forward")
  "M-b" '(dirvish-history-go-backward :which-key "History -> backward")
  "M-l" '(dirvish-ls-switches-menu    :which-key "Setup listing switches")
  "M-m" '(dirvish-mark-menu           :which-key "Manage Marks")
  "M-t" '(dirvish-layout-toggle       :which-key "Toggle Fullscreen")
  "M-s" '(dirvish-setup-menu          :which-key "User Interface Setup")
  "M-e" '(dirvish-emerge-menu         :which-key "Manage Emerged Groups")
  "M-j" '(dirvish-fd-jump             :which-key "Setup fd-find Switches"))
#+end_src

More syntax-highlighting is never a bad idea, especially for navigating files/dirs!

#+begin_src emacs-lisp
(use-package diredfl
  :hook ((dired-mode dirvish-directory-view-mode) . diredfl-mode)
  :custom-face (diredfl-dir-name ((t :bold t))))
#+end_src

**** Eldoc: Document Things at Point

#+begin_src emacs-lisp
(use-package eldoc
  :elpaca nil
  :custom
  (eldoc-echo-area-use-multiline-p nil)
  (eldoc-echo-area-prefer-doc-buffer t)
  (eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly))
#+end_src

Having our Eldoc stuck in mini-buffer is not desirable, therefore it ought to be moved into its own posframe!

#+begin_src emacs-lisp
(use-package eldoc-box
  :after eglot
  :general (general-nmap 'prog-mode-map
             "TAB" '(eldoc-box-help-at-point :which-key "LSP info at point")))
#+end_src

**** Embark: Mini-Buffer Actions Rooted in Keymaps

#+begin_src emacs-lisp
(use-package embark
  :hook (eldoc-documentation-functions . embark-eldoc-first-target)
  :general
  <<embark-bindings>>
  :custom
  (embark-prompter #'embark-completing-read-prompter)
  (embark-indicators '(embark-minimal-indicator
                       embark-highlight-indicator
                       embark-isearch-highlight-indicator))
  :config
  (setq prefix-help-command #'embark-prefix-help-command)
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))
#+end_src

Might as well add several bindings to our Embark.

#+NAME: embark-bindings
#+begin_src emacs-lisp :tangle no
(irkalla/comma-lead-keydef
  "e"   '(:ignore t       :which-key "Embark")
  "e a" '(embark-act      :which-key "Prompt for action -> perform")
  "e d" '(embark-dwim     :which-key "Run default action -> buffer")
  "e h" '(embark-bindings :which-key "Explore Emacs bindings"))
#+end_src

Integrating Embark with our consult package.

#+begin_src emacs-lisp
(use-package embark-consult
  :after (embark consult)
  :hook (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

**** Version Control: Magit + Blamer + Git-Gutter

***** Magit: A Magic Wand for Git

#+begin_src emacs-lisp
(use-package magit
  :defer t
  :if (executable-find "git")
  :general
  <<magit-bindings>>
  :custom
  (magit-auto-revert-mode nil)
  (magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1))
#+end_src

Appending bindings to our Magit configuration.

#+NAME: magit-bindings
#+begin_src emacs-lisp :tangle no
(irkalla/space-lead-keydef
  "g"   '(:ignore t :which-key "Magit")
  "g g" '(magit :which-key "Open Magit!"))
#+end_src

Display the ~TODO~'s of our Git repository in the Magit buffer. Useful for reducing the burden of grepping all the ~TODO~'s
and later deciding which one to hop-on to.

#+begin_src emacs-lisp
(use-package magit-todos
  :hook (magit-mode . magit-todos-mode)
  :custom
  (magit-todos-recursive t)
  (magit-todos-depth 10)
  (magit-todos-exclude-globs '(".git/" "*.html"))
  (magit-todos-nice (if (executable-find "nice") t nil))
  (magit-todos-scanner #'magit-todos--scan-with-rg)
  :config
  (custom-set-variables
   '(magit-todos-keywords (list "TODO" "FIXME" "HACK"))))
#+end_src

***** Blamer: Blame our Git Repository

#+begin_src emacs-lisp
(use-package blamer
  :defer t
  :custom
  (blamer-idle-time 0.5)
  (blamer-min-offset 70)
  (blamer-view 'overlay-right)
  (blamer-type 'visual)
  (blamer-max-commit-message-length 70)
  (blamer-force-truncate-long-line nil)
  (blamer-author-formatter " ✎ %s ")
  (blamer-commit-formatter "● \'%s\' ● ")
  :custom-face
  (blamer-face ((t :foreground "#7a88cf"
                   :background nil
                   :height 125
                   :italic t))))
#+end_src

***** Git-Gutter: Symbols to Highlight Git-related Changes

#+begin_src emacs-lisp
(use-package git-gutter
  :diminish git-gutter-mode
  :hook (prog-mode . git-gutter-mode)
  :custom (git-gutter:update-interval 0.05))
#+end_src

Replacing ~Git-Gutter~ symbols with appropriate vertical lines (fringes) appears to be a saner alternative to the default
symbols which comes with the package.

#+begin_src emacs-lisp
(use-package git-gutter-fringe
  :config
  (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))
#+end_src

**** Ement: A Superior Matrix Client (disabled)
:PROPERTIES:
:header-args+: :tangle no
:END:

#+begin_src emacs-lisp
(use-package ement
  :defer t
  :hook (ement-room-mode . olivetti-mode)
  :custom
  (ement-room-images t)
  (ement-room-message-format-spec "%S> %W%B%r%R[%t]")
  ;; :TODO| launch side-view + limited margin to names category when in a buffer otherwise do not launch...
  ;; (ement-room-list-side-window)
  (ement-notify-notification-predicates
   '(ement-notify--event-mentions-session-user-p
     ement-notify--event-mentions-room-p)))
#+end_src

A quick function which helps us connect to our Matrix server on the fly.

#+begin_src emacs-lisp
;;;###autoload
(defun irkalla/ement-auto-connect ()
  "Connect us to the matrix."
  (interactive)
  (ement-connect
   :user-id "@gilganix:matrix.org"
   :password (irkalla/read-secret-file "ement")
   :uri-prefix "http://localhost:8009"))
#+end_src

**** PDF-Tools: A Quick PDF Viewer

#+begin_src emacs-lisp
(use-package pdf-tools
  :elpaca nil ; :WARN| package <- fetch from Nixpkgs
  :hook
  ;; :HACK| a temporary fix for blinking PDF caused by Evil-Mode!
  (pdf-view-mode . (lambda () (setq evil-normal-state-cursor (list nil)))))
#+end_src

Defer loading ~PDF-Tools~ through pre-defined function.

#+begin_src emacs-lisp
(use-package pdf-loader
  :elpaca nil
  :after pdf-tools
  :custom (pdf-loader-install t))
#+end_src

Make sure that our PDF’s are displayed with darker colors.

#+begin_src emacs-lisp
(use-package pdf-view
  :elpaca nil
  :after pdf-tools
  :magic ("%PDF" . pdf-view-mode)
  :mode ("\\.[pP][dD][fF]\\'" . pdf-view-mode)
  :hook (pdf-view-mode . pdf-view-themed-minor-mode)
  :custom
  (pdf-view-use-scaling t)
  (pdf-view-use-imagemagick nil)
  (pdf-view-display-size 'fit-width))
#+end_src

We also want to jump back to the last known position after opening a PDF file.

#+begin_src emacs-lisp
(use-package pdf-view-restore
  :hook (pdf-view-mode . pdf-view-restore-mode)
  :custom (pdf-view-restore-filename (no-littering-expand-var-file-name "pdf-view-restore")))
#+end_src

**** NOV: A Customizable EPUB Reader (disabled)
:PROPERTIES:
:header-args+: :tangle no
:END:

#+begin_src emacs-lisp
(use-package nov
  :mode ("\\.epub\\'" . nov-mode)
  :hook ((nov-mode . visual-line-mode)
         (nov-mode . visual-fill-column-mode))
  :custom
  (nov-text-width t)
  (nov-text-width 120))
#+end_src

Allow ~NOV~ to display cleaner (+themed) EPUB files when launched.

#+begin_src emacs-lisp
(use-package nov-xwidget
  :elpaca (:host github :repo "chenyanming/nov-xwidget")
  :after nov
  :hook (nov-mode . nov-xwidget-inject-all-files)
  :general
  (general-nmap 'nov-mode-map
    "o" '(nov-xwidget-view :which-key "Open EPUB -> Nov-Mode")))
#+end_src

**** Elfeed: An RSS-feed for the Madness (disabled)

#+begin_src emacs-lisp :tangle no
(use-package elfeed
  :custom
  (elfeed-feeds
   '(("https://sachachua.com/blog/feed/" emacs)
     ("https://www.reddit.com/r/emacs/.rss" emacs)
     ("https://terrytao.wordpress.com/feed/" mathematics)
     ("https://writings.stephenwolfram.com/feed/" mathematics)
     ("https://phys.org/rss-feed/physics-news/" physics)
     ("https://phys.org/rss-feed/breaking/physics-news/" physics))))
#+end_src

**** EShell: A Powerful Shell Which Understands Elisp! (disabled)
:PROPERTIES:
:header-args+: :tangle no
:END:

#+begin_src emacs-lisp
(use-package eshell
  :elpaca nil
  :general
  <<eshell-bindings>>
  :custom
  (eshell-tramp-initialize)
  (eshell-history-size 1024)
  (eshell-hist-ignoredups t)
  (eshell-destroy-buffer-when-process-dies t))
#+end_src

Reducing the burden of longer bindings and appending Eshell-related bindings to our ~general.el~.

#+NAME: eshell-bindings
#+begin_src emacs-lisp :tangle no
(irkalla/space-lead-keydef
  "t t" '(eshell                  :which-key "Start Eshell")
  "t p" '(eshell                  :which-key "Start Eshell in project")
  "t c" '(eshell-life-is-too-much :which-key "Kill Eshell.."))

(irkalla/comma-lead-keydef
  "t n" '(nix-eshell              :which-key "Create Nix (Eshell) environment")
  "t c" '(eshell-kill-process     :which-key "Kill running Eshell process"))
#+end_src

Syntax highlighting inside Eshell, similar to Fish-shell, is nice to have. Let's add such functionality to our Eshell.

#+begin_src emacs-lisp
(use-package eshell-syntax-highlighting
  :hook (eshell-mode . eshell-syntax-highlighting-mode))
#+end_src

**** VTerm: A Quick Terminal Emulator

#+begin_src emacs-lisp
(use-package vterm
  :elpaca nil
  :general
  <<vterm-bindings>>
  :custom
  (vterm-timer-delay 0.01)
  (vterm-max-scrollback 10000)
  (vterm-clear-scrollback-when-clearing t))
#+end_src

Binding our VTerm for quicker access to the terminal.

#+NAME: vterm-bindings
#+begin_src emacs-lisp :tangle no
(general-imap 'vterm-mode-map
  "<S-prior>" #'scroll-down-command
  "<S-next>"  #'scroll-up-command)

(irkalla/space-lead-keydef
  "t t" '(vterm-toggle :which-key "Open VTerm"))

(irkalla/comma-lead-keydef
  "t c" '(vterm-copy-mode :which-key "Terminal -> read-only"))
#+end_src

#+begin_src emacs-lisp
(use-package vterm-toggle
  :after vterm
  :custom
  (vterm-toggle-fullscreen-p nil)
  (vterm-toggle-use-dedicated-buffer t))
#+end_src

**** Vertico: Vertical Interactive Completion

#+begin_src emacs-lisp
(use-package vertico
  :elpaca (:files (:defaults "extensions/*"))
  :hook (elpaca-after-init . vertico-mode)
  :custom
  (vertico-cycle t)
  <<vertico-multiform>>)
#+end_src

Controlling ~Vertico~'s behaviour in several forms has oftentimes proven to be rather useful!

#+NAME: vertico-multiform
#+begin_src emacs-lisp :tangle no
(vertico-multiform-categories
 '((file grid reverse)
   (consult-location buffer)
   (consult-grep buffer)
   (minor-mode reverse)
   (imenu buffer)
   (t unobtrusive)))

(vertico-multiform-commands
  '((consult-dir reverse)
    (execute-extended-command flat)
    (embark-prefix-help-command reverse)
    (completion-at-point reverse)))
#+end_src

Displaying our ~Vertico~ instances in their respective pop-up window would've been preferable.

#+begin_src emacs-lisp :tangle no
(use-package vertico-posframe
  :after vertico
  :hook (vertico-mode . vertico-posframe-mode)
  :custom
  (vertico-posframe-poshandler #'posframe-poshandler-frame-top-center)
  (vertico-posframe-fallback-mode vertico-buffer-mode))
#+end_src

Allowing our mouse to behave as expected when used in ~Vertico~.

#+begin_src emacs-lisp
(use-package vertico-mouse
  :elpaca nil
  :after vertico
  :hook (vertico-mode . vertico-mouse-mode))
#+end_src

Correcting navigation behaviour when interacting with directories in ~Vertico~.

#+begin_src emacs-lisp
(use-package vertico-directory
  :elpaca nil
  :after vertico
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy)
  :general (:keymaps 'vertico-map
             "RET"   #'vertico-directory-enter
             "DEL"   #'vertico-directory-delete-char
             "M-DEL" #'vertico-directory-delete-word))
#+end_src

Let's enhances the behavior & appearance of Emacs mini-buffer prompt:
1. Add a prompt indicator to the completing-read-multiple function
2. Make prompt read-only
3. Hides cursor within prompt
4. Prevents cursor from being placed inside prompt

#+begin_src emacs-lisp
(use-package emacs
  :elpaca nil
  :config
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" "" crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  (setq minibuffer-prompt-properties
	    '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode))
#+end_src

**** Marginalia: Mini-buffer Annotations

#+begin_src emacs-lisp
(use-package marginalia
  :hook (elpaca-after-init . marginalia-mode)
  :general (general-nmap 'minibuffer-local-map
             "M-A" '(marginalia-cycle :which-key "Cycle -> Marginalia annotators"))
  :custom
  (marginalia-max-relative-age 0)
  (marginalia-align 'right))
#+end_src

**** Screenshot: Useful for Spreading Emacs Love

#+begin_src emacs-lisp
(use-package screenshot
  :elpaca (:host github :repo "tecosaur/screenshot")
  :defer t)
#+end_src

*** Supercharging Irkalla's Mobility

**** EVIL: VIM bindings inside Emacs

#+begin_src emacs-lisp
(use-package evil
  :hook (elpaca-after-init . evil-mode)
  :general (general-nmap
             "M-j" #'pixel-scroll-up
             "M-k" #'pixel-scroll-down)
  :custom
  (evil-want-integration t)
  (evil-want-keybinding nil)
  (evil-undo-system 'undo-tree)
  (evil-split-window-below t)
  (evil-vsplit-window-right t)
  (evil-want-C-i-jump nil)              ; restore org-mode tab folding
  (evil-set-initial-state 'dashboard-mode 'emacs))
#+end_src

Expanding the behaviour of ~Evil-Mode~ to support more scenarios/environments.

#+begin_src emacs-lisp
(use-package evil-org
  :hook (org-mode . evil-org-mode)
  :delight (evil-org-mode))

(use-package evil-collection
  :hook (evil-mode . evil-collection-init)
  :custom
  (evil-collection-magit-want-horizontal-movement t)
  (evil-collection-magit-use-y-for-yank t))
#+end_src

Escaping ~Evil-Mode~ should be relatively easy.

#+begin_src emacs-lisp
(use-package evil-escape
  :hook (evil-mode . evil-escape-mode)
  :delight (evil-escape-mode)
  :custom
  (evil-escape-key-sequence "jk")
  (evil-escape-delay 0.1)
  (evil-escape-unodered-key-sequence nil))
#+end_src

Displaying a visual hint for the actions performed in ~Evil-Mode~ seems to be reasonable and should therefore be included.

#+begin_src emacs-lisp
(use-package evil-goggles
  :hook (evil-mode . evil-goggles-mode)
  :custom
  (evil-goggles-enable-delete nil)
  (evil-goggles-duration 0.100)
  (evil-goggles-async-duration 0.900)
  (evil-goggles-use-diff-faces))
#+end_src

A quicker way to comment/uncomment certain blocks of text/code is desired.

#+begin_src emacs-lisp
(use-package evil-nerd-commenter
  :after evil
  :general
  (irkalla/space-lead-keydef
    ";" '(evilnc-comment-operator           :which-key "Un/Comment -> code-block"))
  (irkalla/comma-lead-keydef
    ";" '(evilnc-comment-or-uncomment-lines :which-key "Un/Comment -> line")))
#+end_src

**** MEOW: Yet Another Modal Editing (disabled)
:PROPERTIES:
:header-args+: :tangle no
:END:

Defining our ~QWERTY~-related bindings.

#+begin_src emacs-lisp
(defun meow-setup-qwerty ()
  (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)

  ;; Where the def. of our Meow happens:
  (meow-motion-overwrite-define-key
   '("j" . meow-next)
   '("k" . meow-prev)
   '("<escape>" . ignore))

  (meow-leader-define-key
   ;; SPC j/k will run the original command in MOTION state.
   '("j" . "H-j")
   '("k" . "H-k")

   ;; Use SPC (0-9) for digit arguments.
   '("1" . meow-digit-argument)
   '("2" . meow-digit-argument)
   '("3" . meow-digit-argument)
   '("4" . meow-digit-argument)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . meow-digit-argument)
   '("0" . meow-digit-argument)
   '("/" . meow-keypad-describe-key)

   ;; Quicker navigation's
   '("df" . fd-dired)
   '("r" . consult-recent-file)
   '("f" . +vertico/find-file-in)
   '("F" . consult-find)
   '("da" . consult-ripgrep)
   '("SPC" . meow-M-x)
   '("bs" . bookmark-set)
   '("bm" . bookmark-bmenu-list)
   '("bb" . switch-to-buffer)
   '("bw" . +vertico/switch-workspace-buffer)
   '("?" . meow-cheatsheet))

  (meow-normal-define-key
   '("0" . meow-expand-0)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7)
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)
   '("-" . negative-argument)
   '(";" . meow-reverse)
   '("," . meow-inner-of-thing)
   '("." . meow-bounds-of-thing)
   '("[" . meow-beginning-of-thing)
   '("]" . meow-end-of-thing)
   '("a" . meow-append)
   '("A" . meow-open-below)
   '("b" . meow-back-word)
   '("B" . meow-back-symbol)
   '("c" . meow-change)
   '("d" . meow-delete)
   '("D" . meow-backward-delete)
   '("e" . meow-next-word)
   '("E" . meow-next-symbol)
   '("f" . meow-find)
   '("g" . meow-cancel-selection)
   '("G" . meow-grab)
   '("h" . meow-left)
   '("H" . meow-left-expand)
   '("i" . meow-insert)
   '("I" . meow-open-above)
   '("j" . meow-next)
   '("J" . meow-next-expand)
   '("k" . meow-prev)
   '("K" . meow-prev-expand)
   '("l" . meow-right)
   '("L" . meow-right-expand)
   '("m" . meow-join)
   '("n" . meow-search)
   '("o" . meow-block)
   '("O" . meow-to-block)
   '("p" . meow-yank)
   '("q" . meow-quit)
   '("Q" . meow-goto-line)
   '("r" . meow-replace)
   '("R" . meow-swap-grab)
   '("s" . meow-kill)
   '("t" . meow-till)
   '("u" . meow-undo)
   '("U" . meow-undo-in-selection)
   '("v" . meow-visit)
   '("w" . meow-mark-word)
   '("W" . meow-mark-symbol)
   '("x" . meow-line)
   '("X" . meow-goto-line)
   '("y" . meow-save)
   '("Y" . meow-sync-grab)
   '("z" . meow-pop-selection)
   '("'" . repeat)
   '("<escape>" . ignore)))
#+end_src

Installing ~Meow~ and notifying it about our desired bindings.

#+begin_src emacs-lisp
(use-package meow
  :demand t
  :hook (elpaca-after-init . meow-global-mode)
  :config
  (setq meow-esc-delay 0.001)
  (meow-setup-qwerty)
  (meow-setup-indicator)
  (meow-setup-line-number)
  (add-hook 'meow-normal-mode-hook #'corfu-quit)
  (add-to-list 'meow-update-cursor-functions-alist (cons 'meow--cursor-null-p (lambda ()))))
#+end_src

**** Perspective: An Emacs Workspace Manager

#+begin_src emacs-lisp
(use-package perspective
  :hook (elpaca-after-init . persp-mode)
  :general (general-nmap
             "C-x C-b" '(persp-list-buffers :which-key "Buf. switch + persp-filter"))
  :custom (persp-mode-prefix-key (kbd "C-c M-p")))
#+end_src

*** Tailoring our Editing Experience

#+begin_src emacs-lisp
(use-package emacs
  :elpaca nil
  :hook ((text-mode . auto-fill-mode)
         (text-mode . visual-line-mode))
  :general
  (irkalla/comma-lead-keydef
    :states '(visual)
    :keymaps '(prog-mode-map text-mode-map)
    "a"   '(:ignore t    :which-key "Alignment Control")
    "a r" '(align-regexp :which-key "Align -> RegExp"))
  :config
  (unless (version< emacs-version "29.0")
    (pixel-scroll-precision-mode 1))
  :custom
  (auto-save-interval 30)
  (confirm-nonexistent-file-or-buffer nil)
  (electric-indent-inhibit t)
  (find-file-suppress-same-file-warnings t)
  (indent-tabs-mode nil)
  (remote-file-name-inhibit-locks t)
  (standard-indent 4)
  (tab-width 4)
  (undo-limit 6710886400) ;; 64mb
  (undo-strong-limit 100663296) ;; x 1.5 (96mb)
  (undo-outer-limit 1006632960) ;; x 10 (960mb), (Emacs uses x100), but this seems too high.
  (word-wrap nil))
#+end_src

**** Citar: Quickly Find & Act on Bibliographic References

#+begin_src emacs-lisp
(use-package citar
  :hook ((LaTeX-mode org-mode) . citar-capf-setup)
  :custom (citar-bibliography '("~/Notes/references.bib")))
#+end_src

Integrating ~Citar~ with ~Embark~.

#+begin_src emacs-lisp
(use-package citar-embark
  :after (citar embark)
  :hook (org-mode . citar-embark-mode)
  :config (setq citar-at-point-function 'embark-act))
#+end_src

**** Editor-Conf: Application of Pre-defined Project Modifications

#+begin_src emacs-lisp
(use-package editorconfig
  :hook (prog-mode . editorconfig-mode))
#+end_src

**** Electric-Pair: Automatic Parens Pairing

Extending ~Electric-Pairs~ ability to insert pairs in ~Org-Mode~:
1. Insert LaTeX brackets on ~$~ insertion

#+begin_src emacs-lisp
;;;###autoload
(defun irkalla/org-electric-dollar nil
  "Inserts \\( \\) when $, and replaces it with \\[ \\] when $$."
  (interactive)
  (if (and (looking-at "\\\\)")
           (looking-back "\\\\("))
      (progn (delete-char 2)
             (delete-char -2)
             (insert "\\[\\]"))
    (insert "\\(\\)")
    (backward-char 2)))
#+end_src

**** Highlight Indentation Guides (disabled)

#+begin_src emacs-lisp :tangle no
(use-package highlight-indent-guides
  :hook (prog-mode . highlight-indent-guides-mode)
  :config
  (setq highlight-indent-guides-method 'character
        highlight-indent-guides-responsive 'top))
#+end_src

:TODO| colors -> indentation level + color change based on level of indentation

**** Olivetti: Center Alignment of Content

#+begin_src emacs-lisp
(use-package olivetti
  :defer t
  :general
  (irkalla/comma-lead-keydef
    "q" '(olivetti-mode :which-key "Distraction free writing!"))
  :custom
  (olivetti-body-width 0.7)
  (olivetti-minimum-body-width 115)
  (olivetti-recall-visual-line-mode-entry-state t))
#+end_src

**** Rainbow-Mode: Colorize our Hex-Codes

#+begin_src emacs-lisp
(use-package rainbow-mode
  :hook (prog-mode . rainbow-mode))
#+end_src

**** Save-hist: Management of Our Cursed History

#+begin_src emacs-lisp
(use-package savehist
  :elpaca nil
  :hook ((prog-mode text-mode) . savehist-mode)
  :custom
  (history-length 1000)
  (history-delete-duplicates t)
  (savehist-autosave-interval 60)
  (savehist-save-minibuffer-history t)
  (savehist-file (no-littering-expand-var-file-name "savehist")))
#+end_src

**** Save-place: Recall Last Known Cursor Position

#+begin_src emacs-lisp
(use-package saveplace
  :elpaca nil
  :hook ((prog-mode text-mode) . savehist-mode)
  :custom
  (save-place-file (no-littering-expand-var-file-name "saveplace"))
  (save-place-forget-unreadable-files t))
#+end_src

**** TS-fold: Folding Code-blocks Like Origami

#+begin_src emacs-lisp
(use-package ts-fold
  :elpaca (ts-fold :host github :repo "emacs-tree-sitter/ts-fold")
  :hook (prog-mode . global-ts-fold-mode))
#+end_src

**** Undo-Tree: A Tree-based Undo System

#+begin_src emacs-lisp
(use-package undo-tree
  :after no-littering
  :hook ((prog-mode text-mode) . global-undo-tree-mode)
  :custom
  (undo-tree-history-directory-alist `(("." . ,no-littering-etc-directory)))
  (undo-tree-visualizer-diff t)
  (undo-tree-visualizer-timestamps t))
#+end_src

*** Polish & Perfect: Formatting and Spell-Check

**** Apheleia: Asynchronous Code Formatter (disabled)
:PROPERTIES:
:header-args+: :tangle no
:END:

#+begin_src emacs-lisp
(use-package apheleia
  :diminish apheleia-mode
  :hook (prog-mode . apheleia-mode)
  :config
  <<apheleia-additional-formatters>>)
 #+end_src

 #+NAME: apheleia-additional-formatters
 #+begin_src emacs-lisp :tangle no
;; :NOTE| Nix formatting
(push '(alejandra . ("alejandra" "--quiet" "-"))
      apheleia-formatters)

(setf (alist-get 'nix-mode apheleia-mode-alist)
      '(alejandra))

;; :NOTE| Haskell formatting
(push '(stylish-haskell . ("stylish-haskell" "-"))
      apheleia-formatters)

(setf (alist-get 'haskell-mode apheleia-mode-alist)
      '(stylish-haskell))

(setf (alist-get 'black apheleia-formatters)
      '("black" "--fast" "-"))

(setf (alist-get 'isort apheleia-formatters)
      '("isort" "--profile" "black" "--stdout" "-"))

;; :NOTE| Run ~black~ after ~isort~
(setf (alist-get 'python-mode apheleia-mode-alist)
      '(isort black))
#+end_src

Being able to disable the code-formatter on demand is certainly desirable.

#+begin_src emacs-lisp
;;;###autoload
(defun irkalla/apheleia-disable-formatting ()
  "When triggered -> disable apheleia formatting on save."
  (interactive)
  (remove-hook 'before-save-hook 'eglot-format-buffer t)
  (apheleia-mode -1))
#+end_src

**** Format-All: Pre-defined Auto Formatting

#+begin_src emacs-lisp
(use-package format-all
  :hook ((prog-mode . format-all-mode)
         (prog-mode . format-all-ensure-formatter))
  :config
  (setq-default format-all-formatters
                '(("Nix" alejandra)
                  ("Haskell" stylish-haskell)
                  ("Rust" rustfmt))))
#+end_src

**** Jinx: Fast Spell Checker

#+begin_src emacs-lisp
(use-package jinx
  :elpaca nil
  :hook (text-mode . global-jinx-mode)
  :general
  (general-nmap '(prog-mode-map text-mode-map)
    "z =" '(jinx-correct :which-key "Correct damned misspellings...")))
#+end_src

*** A More Efficient Completion System

**** Corfu: Completion in Region

#+begin_src emacs-lisp
(use-package corfu
  :elpaca (:files (:defaults "extensions/*.el"))
  :hook (elpaca-after-init . global-corfu-mode)
  :general (general-imap 'corfu-map
            "TAB"   #'corfu-next
            [tab]   #'corfu-next
            "S-TAB" #'corfu-previous
            [backtab] #'corfu-previous)
  :custom
  (corfu-auto t)
  (corfu-cycle t)
  (corfu-preselect t)
  (corfu-auto-prefix 1)
  (corfu-auto-delay 0.05)
  (corfu-count 16)
  (corfu-scroll-margin 5)
  (corfu-separator ?\s)
  (corfu-on-exact-match 'insert)
  (corfu-preview-current 'insert)
  (corfu-quit-no-match 'separator)
  :config
  (defun corfu-enable-always-in-minibuffer ()
    "Enable Corfu in the minibuffer if Vertico/Mct are not active."
    (unless (or (bound-and-true-p mct--active)
                (bound-and-true-p vertico--input)
                (eq (current-local-map) read-passwd-map))
      (setq-local corfu-echo-delay nil
                  corfu-popupinfo-delay nil)
      (corfu-mode 1)))
  (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1))
#+end_src

Completion at point is necessary for Corfu to work its wonders as a completion system!

#+begin_src emacs-lisp
(use-package cape
  :config
  (dolist (fn '(cape-file cape-dabbrev cape-ispell cape-symbol cape-tex cape-keyword))
    (add-to-list 'completion-at-point-functions fn)))
#+end_src

Completions should display icons for their respective types.

#+begin_src emacs-lisp
(use-package kind-icon
  :after (svg-lib corfu)
  :custom
  (kind-icon-default-face 'corfu-default)
  ;; :NOTE| Changing the color of our icons
  (kind-icon-blend-background nil)
  (kind-icon-blend-frac 0.08)
  :config (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src

~Corfu~ should also display its completions in a floating window.

#+begin_src emacs-lisp
(use-package corfu-popupinfo
  :elpaca nil
  :hook (corfu-mode . corfu-popupinfo-mode)
  :custom (corfu-popupinfo-delay '(0.5 . 0.2)))
#+end_src

~Corfu~ should also function inside our Emacs terminals.

#+begin_src emacs-lisp
(use-package corfu-terminal
  :unless window-system
  :hook (corfu-mode . corfu-terminal-mode))
#+end_src

**** Tempel: Simple Template (Snippets) System

#+begin_src emacs-lisp
(use-package tempel
  :hook ((prog-mode text-mode) . tempel-setup-capf)
  :config (setq-default tempel-path (expand-file-name "snippets/*.eld" user-emacs-directory)))
#+end_src

Integrating Temple with Corfu to automatically display possible snippet completions.

#+begin_src emacs-lisp
;;;###autoload
(defun tempel-setup-capf ()
    (setq-local completion-at-point-functions
                (cons #'tempel-complete completion-at-point-functions)))
#+end_src

:TODO|CDLaTeX Alternative

**** ChatGPT: Trained Machine Learning System (disabled)

#+begin_src emacs-lisp :tangle no
(use-package chatgpt-shell
  :general (irkalla/comma-lead-keydef
             "o c" '(chatgpt-shell :which-key "Open ChatGPT")
             "o d" '(dall-e-shell  :which-key "Open DALL-E"))
  :custom (chatgpt-shell-openai-key (lambda ()
                                      (irkalla/read-secret-file "closedAI"))))
#+end_src

*** Harnessing the Powers of LSP

#+begin_src emacs-lisp
(use-package emacs
  :elpaca nil
  :custom
  (completions-detailed t)
  (completion-ignore-case t)
  (compilation-scroll-output t)
  (tab-always-indent 'completion)
  (tab-first-completion 'word-or-paren-or-punct))
#+end_src

**** Orderless: Completion That Matches Multiple Regexp

#+begin_src emacs-lisp
(use-package orderless
  :after vertico
  :custom
  (completion-styles '(orderless))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles  . (orderless flex)))
                                   (eglot (styles . (orderless flex))))))
#+end_src

**** Eglot: Language Server Protocol

#+begin_src emacs-lisp
(use-package eglot
  :elpaca nil
  :custom
  (eglot-extend-to-xref t)
  (eglot-ignored-server-capabilities '(:hoverProvider)))
#+end_src

**** Sideline: Minimal UI for LSP Diagnostics

#+begin_src emacs-lisp
(use-package sideline
  :custom
  (sideline-delay 0.2)
  (sideline-display-backend-name nil)
  (sideline-display-backend-type 'inner))
#+end_src

**** Flymake: Built-in Syntax Checker

#+begin_src emacs-lisp
(use-package flymake
  :elpaca nil
  :hook (prog-mode . flymake-mode)
  :custom
  ;; (flymake-show-diagnostics-at-end-of-line t) <- way to much info..
  (flymake-fringe-indicator-position 'right-fringe)
  (elisp-flymake-byte-compile-load-path load-path))
#+end_src

A less crowded way to display our diagnostics compared to built-in solution.

#+begin_src emacs-lisp
(use-package sideline-flymake
  :hook (flymake-mode  . sideline-mode)
  :custom (sideline-backends-right '((sideline-flymake  . down))))
#+end_src

**** Flycheck: On-The-Fly Syntax Checking (disabled)
:PROPERTIES:
:header-args+: :tangle no
:END:

#+begin_src emacs-lisp
(use-package flycheck
  :hook (prog-mode . global-flycheck-mode)
  :custom (flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
#+end_src

The missing flycheck diagnostics integration with consult.

#+begin_src emacs-lisp
(use-package consult-flycheck
  :after (consult flycheck))
#+end_src

Integrate ~Flycheck~ with ~Sideline~ to display diagnostics on-hover.

#+begin_src emacs-lisp
(use-package sideline-flycheck
  :hook (flycheck-mode . sideline-flycheck-setup)
  :custom
  (sideline-flymake-display-errors-whole-line 'line)
  (sideline-backends-right '((sideline-flymake . up))))
#+end_src

*** (Prog & Text) Code Craftsmanship

Managing our coding buffers with Eglot is very common and therefore creating shortcuts to the useful functions is necessary.

#+begin_src emacs-lisp
(use-package eglot
  :general
  (irkalla/space-lead-keydef
    :keymaps 'eglot-mode-map
    "l a"    '(eglot-code-actions    :which-key "Perform code-actions")
    "l r"    '(eglot-rename          :which-key "Rename $SYMB")
    "l f"    '(eglot-format          :which-key "Format buffer")
    "l ?"    '(xref-find-references  :which-key "Find -> references")
    "l d"    '(xref-find-definitions :which-key "Find -> definition")
    "l /"    '(xref-find-apropos     :which-key "Find $SYMB <- pattern"))
  :custom
  (eglot-autoshutdown t)
  (eglot-menu-string "LSP")
  (eglot-ignored-server-capabilities '(:documentHighlightProvider))
  (eglot-confirm-server-initiated-edits nil))
#+end_src

Quicker syntax-highlighting is always deemed desirable and helps us reduce the burden of seeking a cleaner syntax.

#+begin_src emacs-lisp
(use-package tree-sitter
  :hook ((prog-mode . global-tree-sitter-mode)
         (tree-sitter-after-on . tree-sitter-hl-mode)))
#+end_src

**** Emacs-Lisp: Emacs Very Own Lisp Dialect

#+begin_src emacs-lisp
(use-package parinfer-rust-mode
  :hook (emacs-lisp-mode . parinfer-rust-mode)
  :custom
  (parinfer-rust-auto-download t)
  (parinfer-rust-library-directory (no-littering-expand-var-file-name "parinfer-rust/")))
#+end_src

**** Haskell: Lazy & Statically Typed FP Language

#+begin_src emacs-lisp
(use-package haskell-mode
  :mode ("\\.hs\\'" . haskell-mode)
  :hook (haskell-mode . eglot-ensure)
  :config
  (setq-local eglot-workspace-configuration
              '((haskell (formattingProvider "stylish-haskell")))))
#+end_src

**** Markdown: Simple Markup Language

#+begin_src emacs-lisp
(use-package markdown-mode
  :mode ("\\.md\\'" . gfm-mode)
  :general
  (irkalla/comma-lead-keydef
    :keymaps 'markdown-mode-map
    "m d"    '(markdown-do :which-key "Perform -> action"))
  :custom-face
  (markdown-header-face-1 ((t (:inherit markdown-header-face :height 1.25 :weight extra-bold))))
  (markdown-header-face-2 ((t (:inherit markdown-header-face :height 1.15 :weight bold))))
  (markdown-header-face-3 ((t (:inherit markdown-header-face :height 1.08 :weight bold))))
  (markdown-header-face-4 ((t (:inherit markdown-header-face :height 1.00 :weight bold))))
  (markdown-header-face-5 ((t (:inherit markdown-header-face :height 0.90 :weight bold))))
  (markdown-header-face-6 ((t (:inherit markdown-header-face :height 0.75 :weight extra-bold))))
  :custom (markdown-command "multimarkdown"))
#+end_src

**** Nix: Dynamic Typed FP Language Used in NixOS

#+begin_src emacs-lisp
(use-package nix-mode
  :mode ("\\.nix\\'" . nix-mode)
  :hook (nix-mode . eglot-ensure)
  :config (add-to-list 'eglot-server-programs '(nix-mode . ("nil"))))
#+end_src

**** Org-Mode: The Superior File-format

#+begin_src emacs-lisp
(use-package org
  :elpaca nil
  :hook (org-mode . org-display-inline-images)
  :general
  (irkalla/comma-lead-keydef
    "o"   '(:ignore t        :which-key "Org-Mode")
    "o e" '(org-edit-special :which-key "Edit -> special buffer")
    "o t" '(org-babel-tangle :which-key "Tangle buffer"))
  (general-imap 'org-mode-map
    "$" #'irkalla/org-electric-dollar)
  :custom-face
  (org-document-title ((t (:height 1.5))))
  (org-level-1        ((t (:inherit outline-1 :height 1.25))))
  (org-level-2        ((t (:inherit outline-2 :height 1.15))))
  (org-level-3        ((t (:inherit outline-3 :height 1.12))))
  (org-level-4        ((t (:inherit outline-4 :height 1.09))))
  (org-level-5        ((t (:inherit outline-5 :height 1.06))))
  :config
  ;; :NOTE| Move our LaTeX previews to cache dir
  (let ((latex-dir (no-littering-expand-var-file-name "latex-preview")))
    (unless (file-directory-p latex-dir)
      (mkdir latex-dir t))
    (setq-default org-preview-latex-image-directory latex-dir))

  ;; :NOTE| Change the aesthetics of our LaTeX previews
  (setq-default org-latex-preview-options
                (progn (plist-put org-format-latex-options :background "Transparent")
                       (plist-put org-format-latex-options :scale 2.5)
                       (plist-put org-format-latex-options :zoom 1.15)))
  :custom
  (org-fontify-quote-and-verse-blocks t)
  (org-catch-invisible-edits 'show-and-error)
  (org-cycle-separator-lines 2)
  (org-cycle-include-plain-lists 'integrate)
  (org-edit-src-auto-save-idle-delay 5)
  (org-ellipsis "…")
  (org-export-coding-system 'utf-8)
  (org-export-preserve-breaks t)
  (org-hide-emphasis-markers t)
  (org-highlight-latex-and-related '(native))
  (org-image-actual-width (truncate (* (window-pixel-width) 0.8)))
  (org-insert-heading-respect-content t)
  (org-latex-tables-centered t)
  (org-pretty-entities t)
  (org-special-ctrl-a/e t)
  (org-startup-folded 'overview)
  (org-startup-indented t)
  (org-startup-with-inline-images t)
  (org-support-shift-select t)
  (org-tags-column 0)

  ;; Code blocks
  (org-confirm-babel-evaluate nil)
  (org-edit-src-content-indentation 0)
  (org-src-fontify-natively t)
  (org-src-preserve-indentation t)
  (org-src-tab-acts-natively nil))
#+end_src

Automatically render our LaTeX code-blocks.

#+begin_src emacs-lisp
(use-package org-fragtog
  :after org
  :hook (org-mode . org-fragtog-mode))
#+end_src

We also want to generate our "Table of Contents" on the fly.

#+begin_src emacs-lisp
(use-package toc-org
  :after org
  :hook (org-mode . toc-org-enable)
  :custom (toc-org-max-depth 3))
#+end_src

***** Org-Modern: A Modern Org-Mode Look

#+begin_src emacs-lisp
(use-package org-modern
  :after org
  :hook (org-mode . org-modern-mode)
  :custom-face (org-modern-symbol ((t :family "DejaVu Sans")))
  :custom
  ;; :NOTE| Settings replaced by svg-tag-mode
  (org-modern-tag nil)
  (org-modern-todo nil))
#+end_src

***** Org-Roam: A Powerful Note-Taking System

#+begin_src emacs-lisp
(use-package org-roam
  :after org
  :general
  (irkalla/comma-lead-keydef
    :keymaps 'org-mode-map
    "o r"   '(:ignore t               :which-key "Org-Roam")
    "o r l" '(org-roam-buffer-toggle  :which-key "Org-Roam -> buffer")
    "o r n" '(org-roam-node-find      :which-key "Open node -> title/alias")
    "o r g" '(org-roam-graph          :which-key "Build -> show node of graph")
    "o r i" '(org-roam-node-insert    :which-key "Find node -> insert `:id` org-link")
    "o r c" '(org-roam-capture        :which-key "Open org-capture of node"))
  :custom
  (org-roam-directory (file-truename "~/org/org-roam"))
  (org-roam-completion-everywhere t)
  (org-roam-capture-templates
   `(("d" "default" plain "%?"
      :if-new (file+head
               "%<%Y%m%d%H%M%S>-${slug}.org"
               ,(let ((options '("#+options: _:{}"
                                 "#+options: ^:{}"
                                 "#+startup: latexpreview"
                                 "#+startup: entitiespretty"
                                 "#+startup: inlineimages"
                                 "#+title: ${title}")))
                  (mapconcat 'identity options "\n")))
      :unnarrowed t)))
  (org-roam-node-display-template "${title}"))
#+end_src

A GUI is desired for our Org-Roam to reduce the burden of browsing our notes.

#+begin_src emacs-lisp
(use-package org-roam-ui
  :after org-roam
  :custom
  (org-roam-ui-sync-theme t)
  (org-roam-ui-follow t)
  (org-roam-ui-update-on-save t)
  (org-roam-ui-open-on-start nil))
#+end_src

***** Org-Babel: Execution of Org SRC-blocks

Evaluate code-blocks on ~<Return>~ is an expected behaviour in my opinion. (🤷)

#+begin_src emacs-lisp
;;;###autoload
(defun irkalla/ret-babel-exec ()
  "Execute src-block on <RET>, otherwise goto next line."
  (interactive)
  (if (org-in-src-block-p)
      (org-babel-execute-src-block)
    (evil-ret)))
#+end_src

Afterwards, we proceed with the configuration of our ~Org-babel~ as planned.

#+begin_src emacs-lisp
(use-package ob
  :elpaca nil
  :after org
  :hook (org-babel-after-execute . org-display-inline-images)
  :general (general-nmap 'org-mode-map
             [remap evil-ret] #'irkalla/ret-babel-exec)
  :custom
  (org-babel-default-header-args
   '((:cache   . "no")
     (:eval    . "never-export")
     (:exports . "code")
     (:hlines  . "no")
     (:noweb   . "yes")
     (:results . "drawer replace")
     (:session . "none")
     (:tangle  . "no")))
  (org-export-use-babel nil)
  (org-confirm-babel-evaluate nil)
  :config
  (defadvice org-babel-execute-src-block (around load-language nil activate)
   "Load Org-babel languages on demand."
   (let ((language (org-element-property :language (org-element-at-point))))
     (unless (cdr (assoc (intern language) org-babel-load-languages))
       (add-to-list 'org-babel-load-languages (cons (intern language) t))
       (org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages))
     ad-do-it)))
#+end_src

Asynchronous ~Org-Babel~ evaluation for quicker block play.

#+begin_src emacs-lisp
(use-package ob-async
  :after org)
#+end_src

**** Python: Boring High-level GP Language

#+begin_src emacs-lisp
(use-package python-mode
  :mode ("\\.py\\'" . python-mode)
  :hook (python-mode . eglot-ensure)
  :config
  (setq eglot-workspace-configuration
        '((:pyright . ((useLibraryCodeForTypes . t))))))
#+end_src

**** Rust: A Type-safe GP Language

#+begin_src emacs-lisp
(use-package rust-mode
  :mode ("\\.rs$" . rust-mode)
  :hook ((rust-mode . eglot-ensure)
         (rust-mode . (lambda () (setq indent-tabs-mode nil))))
  :general
  (irkalla/comma-lead-keydef
    :keymaps 'rust-mode-map
    "r"   '(:ignore t       :which-key "Rust")
    "r b" '(rust-compile    :which-key "Compile project")
    "r c" '(rust-check      :which-key "Compile + cargo check")
    "r l" '(rust-run-clippy :which-key "Run cargo clippy")
    "r r" '(rust-run        :which-key "Run project")
    "r t" '(rust-test       :which-key "Run tests on project"))
  :config
  (setq-default eglot-workspace-configuration
                '((:rust-analyzer
                   ;; https://rust-analyzer.github.io/manual.html
                   :completion  (;; Completion-related
                                 :callable (:snippets "fill_arguments"))
                   :checkOnSave (;; Actions to check upon saving
                                 :command "clippy"
                                 :allTargets :json-false))))

  (defun irkalla/locate-cargo-toml (dir)
      "Locate the missing Rust project Cargo.toml."
      (if-let ((root (locate-dominating-file dir "Cargo.toml")))
          (list 'vc 'Git root)))
  (add-hook 'rust-mode-hook
            (lambda () (add-to-list 'project-find-functions #'irkalla/locate-cargo-toml))))
#+end_src

Integrating ~Cargo~ with our newly added ~Rust-Mode~ would help us make our environment more lively!

#+begin_src emacs-lisp
(use-package cargo
  :hook (rust-mode . cargo-minor-mode)
  :general
  (irkalla/comma-lead-keydef
    :keymaps 'rust-mode-map
    "r p a" '(cargo-process-add   :which-key "Cargo Add")
    "r p c" '(cargo-process-clean :which-key "Cargo Clean"))
  :custom (cargo-process--command-clippy "clippy"))
#+end_src

Being able to retain our notes in ~Org-Mode~ would've been wonderful. Therefore we ought to make it possible!

#+begin_src emacs-lisp
  (use-package ob-rust
    :defer t)
#+end_src

**** Typst: The Modern & Cleaner LaTeX

#+begin_src emacs-lisp
(use-package typst-mode
  :elpaca (:host github :repo "Ziqi-Yang/typst-mode.el")
  :mode ("\\.typ\\'" . typst-mode))
#+end_src

**** Yuck: Elkowar's Lisp Dialect for EWW (disabled)

#+begin_src emacs-lisp :tangle no
(use-package yuck-mode)
#+end_src

** Concluding Our Journey with Irkalla Emacs

#+begin_src emacs-lisp
;;; init.el ends here
#+end_src
